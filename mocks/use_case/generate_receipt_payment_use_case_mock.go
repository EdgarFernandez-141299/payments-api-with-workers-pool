// Code generated by mockery. DO NOT EDIT.

package use_case

import (
	context "context"

	command "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/domain/payment_receipt/command"

	entities "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// GenerateReceiptPaymentUseCase is an autogenerated mock type for the GenerateReceiptPaymentUseCase type
type GenerateReceiptPaymentUseCase struct {
	mock.Mock
}

type GenerateReceiptPaymentUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *GenerateReceiptPaymentUseCase) EXPECT() *GenerateReceiptPaymentUseCase_Expecter {
	return &GenerateReceiptPaymentUseCase_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function with given fields: ctx, cmd
func (_m *GenerateReceiptPaymentUseCase) Generate(ctx context.Context, cmd command.CreatePaymentReceiptCommand) (entities.PaymentReceipt, error) {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 entities.PaymentReceipt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, command.CreatePaymentReceiptCommand) (entities.PaymentReceipt, error)); ok {
		return rf(ctx, cmd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, command.CreatePaymentReceiptCommand) entities.PaymentReceipt); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Get(0).(entities.PaymentReceipt)
	}

	if rf, ok := ret.Get(1).(func(context.Context, command.CreatePaymentReceiptCommand) error); ok {
		r1 = rf(ctx, cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateReceiptPaymentUseCase_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type GenerateReceiptPaymentUseCase_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - ctx context.Context
//   - cmd command.CreatePaymentReceiptCommand
func (_e *GenerateReceiptPaymentUseCase_Expecter) Generate(ctx interface{}, cmd interface{}) *GenerateReceiptPaymentUseCase_Generate_Call {
	return &GenerateReceiptPaymentUseCase_Generate_Call{Call: _e.mock.On("Generate", ctx, cmd)}
}

func (_c *GenerateReceiptPaymentUseCase_Generate_Call) Run(run func(ctx context.Context, cmd command.CreatePaymentReceiptCommand)) *GenerateReceiptPaymentUseCase_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(command.CreatePaymentReceiptCommand))
	})
	return _c
}

func (_c *GenerateReceiptPaymentUseCase_Generate_Call) Return(_a0 entities.PaymentReceipt, _a1 error) *GenerateReceiptPaymentUseCase_Generate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GenerateReceiptPaymentUseCase_Generate_Call) RunAndReturn(run func(context.Context, command.CreatePaymentReceiptCommand) (entities.PaymentReceipt, error)) *GenerateReceiptPaymentUseCase_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// NewGenerateReceiptPaymentUseCase creates a new instance of GenerateReceiptPaymentUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGenerateReceiptPaymentUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *GenerateReceiptPaymentUseCase {
	mock := &GenerateReceiptPaymentUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
