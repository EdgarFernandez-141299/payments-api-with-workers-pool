// Code generated by mockery. DO NOT EDIT.

package worfkflows

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	internal "go.temporal.io/sdk/client"


	worfkflows "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/application/order/worfkflows"
)

// PaymentOrderWorkflow is an autogenerated mock type for the PaymentOrderWorkflow type
type PaymentOrderWorkflow struct {
	mock.Mock
}

type PaymentOrderWorkflow_Expecter struct {
	mock *mock.Mock
}

func (_m *PaymentOrderWorkflow) EXPECT() *PaymentOrderWorkflow_Expecter {
	return &PaymentOrderWorkflow_Expecter{mock: &_m.Mock}
}

// Call provides a mock function with given fields: ctx, referenceID, cmd
func (_m *PaymentOrderWorkflow) Call(ctx context.Context, referenceID string, cmd worfkflows.PaymentWorkflowInput) (internal.WorkflowRun, error) {
	ret := _m.Called(ctx, referenceID, cmd)

	if len(ret) == 0 {
		panic("no return value specified for Call")
	}

	var r0 internal.WorkflowRun
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, worfkflows.PaymentWorkflowInput) (internal.WorkflowRun, error)); ok {
		return rf(ctx, referenceID, cmd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, worfkflows.PaymentWorkflowInput) internal.WorkflowRun); ok {
		r0 = rf(ctx, referenceID, cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(internal.WorkflowRun)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, worfkflows.PaymentWorkflowInput) error); ok {
		r1 = rf(ctx, referenceID, cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentOrderWorkflow_Call_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Call'
type PaymentOrderWorkflow_Call_Call struct {
	*mock.Call
}

// Call is a helper method to define mock.On call
//   - ctx context.Context
//   - referenceID string
//   - cmd worfkflows.PaymentWorkflowInput
func (_e *PaymentOrderWorkflow_Expecter) Call(ctx interface{}, referenceID interface{}, cmd interface{}) *PaymentOrderWorkflow_Call_Call {
	return &PaymentOrderWorkflow_Call_Call{Call: _e.mock.On("Call", ctx, referenceID, cmd)}
}

func (_c *PaymentOrderWorkflow_Call_Call) Run(run func(ctx context.Context, referenceID string, cmd worfkflows.PaymentWorkflowInput)) *PaymentOrderWorkflow_Call_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(worfkflows.PaymentWorkflowInput))
	})
	return _c
}

func (_c *PaymentOrderWorkflow_Call_Call) Return(_a0 internal.WorkflowRun, _a1 error) *PaymentOrderWorkflow_Call_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PaymentOrderWorkflow_Call_Call) RunAndReturn(run func(context.Context, string, worfkflows.PaymentWorkflowInput) (internal.WorkflowRun, error)) *PaymentOrderWorkflow_Call_Call {
	_c.Call.Return(run)
	return _c
}

// SendCaptureFlowSignal provides a mock function with given fields: ctx, paymentOrderID, cmd
func (_m *PaymentOrderWorkflow) SendCaptureFlowSignal(ctx context.Context, paymentOrderID string, cmd worfkflows.CompleteCaptureFlowSignal) error {
	ret := _m.Called(ctx, paymentOrderID, cmd)

	if len(ret) == 0 {
		panic("no return value specified for SendCaptureFlowSignal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, worfkflows.CompleteCaptureFlowSignal) error); ok {
		r0 = rf(ctx, paymentOrderID, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PaymentOrderWorkflow_SendCaptureFlowSignal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendCaptureFlowSignal'
type PaymentOrderWorkflow_SendCaptureFlowSignal_Call struct {
	*mock.Call
}

// SendCaptureFlowSignal is a helper method to define mock.On call
//   - ctx context.Context
//   - paymentOrderID string
//   - cmd worfkflows.CompleteCaptureFlowSignal
func (_e *PaymentOrderWorkflow_Expecter) SendCaptureFlowSignal(ctx interface{}, paymentOrderID interface{}, cmd interface{}) *PaymentOrderWorkflow_SendCaptureFlowSignal_Call {
	return &PaymentOrderWorkflow_SendCaptureFlowSignal_Call{Call: _e.mock.On("SendCaptureFlowSignal", ctx, paymentOrderID, cmd)}
}

func (_c *PaymentOrderWorkflow_SendCaptureFlowSignal_Call) Run(run func(ctx context.Context, paymentOrderID string, cmd worfkflows.CompleteCaptureFlowSignal)) *PaymentOrderWorkflow_SendCaptureFlowSignal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(worfkflows.CompleteCaptureFlowSignal))
	})
	return _c
}

func (_c *PaymentOrderWorkflow_SendCaptureFlowSignal_Call) Return(_a0 error) *PaymentOrderWorkflow_SendCaptureFlowSignal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PaymentOrderWorkflow_SendCaptureFlowSignal_Call) RunAndReturn(run func(context.Context, string, worfkflows.CompleteCaptureFlowSignal) error) *PaymentOrderWorkflow_SendCaptureFlowSignal_Call {
	_c.Call.Return(run)
	return _c
}

// SendProcessedSignal provides a mock function with given fields: ctx, paymentOrderID, cmd
func (_m *PaymentOrderWorkflow) SendProcessedSignal(ctx context.Context, paymentOrderID string, cmd worfkflows.PaymentProcessedSignal) error {
	ret := _m.Called(ctx, paymentOrderID, cmd)

	if len(ret) == 0 {
		panic("no return value specified for SendProcessedSignal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, worfkflows.PaymentProcessedSignal) error); ok {
		r0 = rf(ctx, paymentOrderID, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PaymentOrderWorkflow_SendProcessedSignal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendProcessedSignal'
type PaymentOrderWorkflow_SendProcessedSignal_Call struct {
	*mock.Call
}

// SendProcessedSignal is a helper method to define mock.On call
//   - ctx context.Context
//   - paymentOrderID string
//   - cmd worfkflows.PaymentProcessedSignal
func (_e *PaymentOrderWorkflow_Expecter) SendProcessedSignal(ctx interface{}, paymentOrderID interface{}, cmd interface{}) *PaymentOrderWorkflow_SendProcessedSignal_Call {
	return &PaymentOrderWorkflow_SendProcessedSignal_Call{Call: _e.mock.On("SendProcessedSignal", ctx, paymentOrderID, cmd)}
}

func (_c *PaymentOrderWorkflow_SendProcessedSignal_Call) Run(run func(ctx context.Context, paymentOrderID string, cmd worfkflows.PaymentProcessedSignal)) *PaymentOrderWorkflow_SendProcessedSignal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(worfkflows.PaymentProcessedSignal))
	})
	return _c
}

func (_c *PaymentOrderWorkflow_SendProcessedSignal_Call) Return(_a0 error) *PaymentOrderWorkflow_SendProcessedSignal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PaymentOrderWorkflow_SendProcessedSignal_Call) RunAndReturn(run func(context.Context, string, worfkflows.PaymentProcessedSignal) error) *PaymentOrderWorkflow_SendProcessedSignal_Call {
	_c.Call.Return(run)
	return _c
}

// NewPaymentOrderWorkflow creates a new instance of PaymentOrderWorkflow. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentOrderWorkflow(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentOrderWorkflow {
	mock := &PaymentOrderWorkflow{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
