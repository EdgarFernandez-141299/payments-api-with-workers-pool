// Code generated by mockery. DO NOT EDIT.

package services

import (
	context "context"

	constants "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/application/notification/constants"

	mock "github.com/stretchr/testify/mock"

	projections "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/domain/card/projections"
)

// NotificationService is an autogenerated mock type for the NotificationService type
type NotificationService struct {
	mock.Mock
}

type NotificationService_Expecter struct {
	mock *mock.Mock
}

func (_m *NotificationService) EXPECT() *NotificationService_Expecter {
	return &NotificationService_Expecter{mock: &_m.Mock}
}

// NotifyCardAddition provides a mock function with given fields: ctx, notificationChannels, userID, email, actionDate, lastFour, userLanguage
func (_m *NotificationService) NotifyCardAddition(ctx context.Context, notificationChannels []constants.NotificationChannel, userID *string, email *string, actionDate *string, lastFour *string, userLanguage string) error {
	ret := _m.Called(ctx, notificationChannels, userID, email, actionDate, lastFour, userLanguage)

	if len(ret) == 0 {
		panic("no return value specified for NotifyCardAddition")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []constants.NotificationChannel, *string, *string, *string, *string, string) error); ok {
		r0 = rf(ctx, notificationChannels, userID, email, actionDate, lastFour, userLanguage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotificationService_NotifyCardAddition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyCardAddition'
type NotificationService_NotifyCardAddition_Call struct {
	*mock.Call
}

// NotifyCardAddition is a helper method to define mock.On call
//   - ctx context.Context
//   - notificationChannels []constants.NotificationChannel
//   - userID *string
//   - email *string
//   - actionDate *string
//   - lastFour *string
//   - userLanguage string
func (_e *NotificationService_Expecter) NotifyCardAddition(ctx interface{}, notificationChannels interface{}, userID interface{}, email interface{}, actionDate interface{}, lastFour interface{}, userLanguage interface{}) *NotificationService_NotifyCardAddition_Call {
	return &NotificationService_NotifyCardAddition_Call{Call: _e.mock.On("NotifyCardAddition", ctx, notificationChannels, userID, email, actionDate, lastFour, userLanguage)}
}

func (_c *NotificationService_NotifyCardAddition_Call) Run(run func(ctx context.Context, notificationChannels []constants.NotificationChannel, userID *string, email *string, actionDate *string, lastFour *string, userLanguage string)) *NotificationService_NotifyCardAddition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]constants.NotificationChannel), args[2].(*string), args[3].(*string), args[4].(*string), args[5].(*string), args[6].(string))
	})
	return _c
}

func (_c *NotificationService_NotifyCardAddition_Call) Return(_a0 error) *NotificationService_NotifyCardAddition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NotificationService_NotifyCardAddition_Call) RunAndReturn(run func(context.Context, []constants.NotificationChannel, *string, *string, *string, *string, string) error) *NotificationService_NotifyCardAddition_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyCardDeletion provides a mock function with given fields: ctx, notificationChannels, userID, email, actionDate, lastFour, userLanguage
func (_m *NotificationService) NotifyCardDeletion(ctx context.Context, notificationChannels []constants.NotificationChannel, userID *string, email *string, actionDate *string, lastFour *string, userLanguage string) error {
	ret := _m.Called(ctx, notificationChannels, userID, email, actionDate, lastFour, userLanguage)

	if len(ret) == 0 {
		panic("no return value specified for NotifyCardDeletion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []constants.NotificationChannel, *string, *string, *string, *string, string) error); ok {
		r0 = rf(ctx, notificationChannels, userID, email, actionDate, lastFour, userLanguage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotificationService_NotifyCardDeletion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyCardDeletion'
type NotificationService_NotifyCardDeletion_Call struct {
	*mock.Call
}

// NotifyCardDeletion is a helper method to define mock.On call
//   - ctx context.Context
//   - notificationChannels []constants.NotificationChannel
//   - userID *string
//   - email *string
//   - actionDate *string
//   - lastFour *string
//   - userLanguage string
func (_e *NotificationService_Expecter) NotifyCardDeletion(ctx interface{}, notificationChannels interface{}, userID interface{}, email interface{}, actionDate interface{}, lastFour interface{}, userLanguage interface{}) *NotificationService_NotifyCardDeletion_Call {
	return &NotificationService_NotifyCardDeletion_Call{Call: _e.mock.On("NotifyCardDeletion", ctx, notificationChannels, userID, email, actionDate, lastFour, userLanguage)}
}

func (_c *NotificationService_NotifyCardDeletion_Call) Run(run func(ctx context.Context, notificationChannels []constants.NotificationChannel, userID *string, email *string, actionDate *string, lastFour *string, userLanguage string)) *NotificationService_NotifyCardDeletion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]constants.NotificationChannel), args[2].(*string), args[3].(*string), args[4].(*string), args[5].(*string), args[6].(string))
	})
	return _c
}

func (_c *NotificationService_NotifyCardDeletion_Call) Return(_a0 error) *NotificationService_NotifyCardDeletion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NotificationService_NotifyCardDeletion_Call) RunAndReturn(run func(context.Context, []constants.NotificationChannel, *string, *string, *string, *string, string) error) *NotificationService_NotifyCardDeletion_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyCardExpiringSoon provides a mock function with given fields: ctx, notificationChannels, notificationCardExpiringSoonProjection
func (_m *NotificationService) NotifyCardExpiringSoon(ctx context.Context, notificationChannels []constants.NotificationChannel, notificationCardExpiringSoonProjection projections.NotificationCardExpiringSoonProjection) error {
	ret := _m.Called(ctx, notificationChannels, notificationCardExpiringSoonProjection)

	if len(ret) == 0 {
		panic("no return value specified for NotifyCardExpiringSoon")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []constants.NotificationChannel, projections.NotificationCardExpiringSoonProjection) error); ok {
		r0 = rf(ctx, notificationChannels, notificationCardExpiringSoonProjection)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotificationService_NotifyCardExpiringSoon_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyCardExpiringSoon'
type NotificationService_NotifyCardExpiringSoon_Call struct {
	*mock.Call
}

// NotifyCardExpiringSoon is a helper method to define mock.On call
//   - ctx context.Context
//   - notificationChannels []constants.NotificationChannel
//   - notificationCardExpiringSoonProjection projections.NotificationCardExpiringSoonProjection
func (_e *NotificationService_Expecter) NotifyCardExpiringSoon(ctx interface{}, notificationChannels interface{}, notificationCardExpiringSoonProjection interface{}) *NotificationService_NotifyCardExpiringSoon_Call {
	return &NotificationService_NotifyCardExpiringSoon_Call{Call: _e.mock.On("NotifyCardExpiringSoon", ctx, notificationChannels, notificationCardExpiringSoonProjection)}
}

func (_c *NotificationService_NotifyCardExpiringSoon_Call) Run(run func(ctx context.Context, notificationChannels []constants.NotificationChannel, notificationCardExpiringSoonProjection projections.NotificationCardExpiringSoonProjection)) *NotificationService_NotifyCardExpiringSoon_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]constants.NotificationChannel), args[2].(projections.NotificationCardExpiringSoonProjection))
	})
	return _c
}

func (_c *NotificationService_NotifyCardExpiringSoon_Call) Return(_a0 error) *NotificationService_NotifyCardExpiringSoon_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NotificationService_NotifyCardExpiringSoon_Call) RunAndReturn(run func(context.Context, []constants.NotificationChannel, projections.NotificationCardExpiringSoonProjection) error) *NotificationService_NotifyCardExpiringSoon_Call {
	_c.Call.Return(run)
	return _c
}

// NewNotificationService creates a new instance of NotificationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationService {
	mock := &NotificationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
