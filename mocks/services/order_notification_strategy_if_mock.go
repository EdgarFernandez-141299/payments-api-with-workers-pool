// Code generated by mockery. DO NOT EDIT.

package services

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// OrderNotificationStrategyIF is an autogenerated mock type for the OrderNotificationStrategyIF type
type OrderNotificationStrategyIF struct {
	mock.Mock
}

type OrderNotificationStrategyIF_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderNotificationStrategyIF) EXPECT() *OrderNotificationStrategyIF_Expecter {
	return &OrderNotificationStrategyIF_Expecter{mock: &_m.Mock}
}

// NotifyChange provides a mock function with given fields: ctx, orderID, paymentID
func (_m *OrderNotificationStrategyIF) NotifyChange(ctx context.Context, orderID string, paymentID string) error {
	ret := _m.Called(ctx, orderID, paymentID)

	if len(ret) == 0 {
		panic("no return value specified for NotifyChange")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, orderID, paymentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderNotificationStrategyIF_NotifyChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyChange'
type OrderNotificationStrategyIF_NotifyChange_Call struct {
	*mock.Call
}

// NotifyChange is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID string
//   - paymentID string
func (_e *OrderNotificationStrategyIF_Expecter) NotifyChange(ctx interface{}, orderID interface{}, paymentID interface{}) *OrderNotificationStrategyIF_NotifyChange_Call {
	return &OrderNotificationStrategyIF_NotifyChange_Call{Call: _e.mock.On("NotifyChange", ctx, orderID, paymentID)}
}

func (_c *OrderNotificationStrategyIF_NotifyChange_Call) Run(run func(ctx context.Context, orderID string, paymentID string)) *OrderNotificationStrategyIF_NotifyChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *OrderNotificationStrategyIF_NotifyChange_Call) Return(_a0 error) *OrderNotificationStrategyIF_NotifyChange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderNotificationStrategyIF_NotifyChange_Call) RunAndReturn(run func(context.Context, string, string) error) *OrderNotificationStrategyIF_NotifyChange_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderNotificationStrategyIF creates a new instance of OrderNotificationStrategyIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderNotificationStrategyIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderNotificationStrategyIF {
	mock := &OrderNotificationStrategyIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
