// Code generated by mockery. DO NOT EDIT.

package services

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	integration_events "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/domain/order/integration_events"

	value_objects "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/domain/value_objects"
)

// OrderProcessedNotificationServiceIF is an autogenerated mock type for the OrderProcessedNotificationServiceIF type
type OrderProcessedNotificationServiceIF struct {
	mock.Mock
}

type OrderProcessedNotificationServiceIF_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderProcessedNotificationServiceIF) EXPECT() *OrderProcessedNotificationServiceIF_Expecter {
	return &OrderProcessedNotificationServiceIF_Expecter{mock: &_m.Mock}
}

// Notify provides a mock function with given fields: ctx, webhookUrl, event
func (_m *OrderProcessedNotificationServiceIF) Notify(ctx context.Context, webhookUrl value_objects.WebhookUrl, event integration_events.OrderPaymentProcessedIntegrationEvent) error {
	ret := _m.Called(ctx, webhookUrl, event)

	if len(ret) == 0 {
		panic("no return value specified for Notify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, value_objects.WebhookUrl, integration_events.OrderPaymentProcessedIntegrationEvent) error); ok {
		r0 = rf(ctx, webhookUrl, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderProcessedNotificationServiceIF_Notify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Notify'
type OrderProcessedNotificationServiceIF_Notify_Call struct {
	*mock.Call
}

// Notify is a helper method to define mock.On call
//   - ctx context.Context
//   - webhookUrl value_objects.WebhookUrl
//   - event integration_events.OrderPaymentProcessedIntegrationEvent
func (_e *OrderProcessedNotificationServiceIF_Expecter) Notify(ctx interface{}, webhookUrl interface{}, event interface{}) *OrderProcessedNotificationServiceIF_Notify_Call {
	return &OrderProcessedNotificationServiceIF_Notify_Call{Call: _e.mock.On("Notify", ctx, webhookUrl, event)}
}

func (_c *OrderProcessedNotificationServiceIF_Notify_Call) Run(run func(ctx context.Context, webhookUrl value_objects.WebhookUrl, event integration_events.OrderPaymentProcessedIntegrationEvent)) *OrderProcessedNotificationServiceIF_Notify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(value_objects.WebhookUrl), args[2].(integration_events.OrderPaymentProcessedIntegrationEvent))
	})
	return _c
}

func (_c *OrderProcessedNotificationServiceIF_Notify_Call) Return(_a0 error) *OrderProcessedNotificationServiceIF_Notify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderProcessedNotificationServiceIF_Notify_Call) RunAndReturn(run func(context.Context, value_objects.WebhookUrl, integration_events.OrderPaymentProcessedIntegrationEvent) error) *OrderProcessedNotificationServiceIF_Notify_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderProcessedNotificationServiceIF creates a new instance of OrderProcessedNotificationServiceIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderProcessedNotificationServiceIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderProcessedNotificationServiceIF {
	mock := &OrderProcessedNotificationServiceIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
