// Code generated by mockery. DO NOT EDIT.

package queries

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	response "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/infra/api/handler/card/dto/response"
)

// GetCardUsecaseIF is an autogenerated mock type for the GetCardUsecaseIF type
type GetCardUsecaseIF struct {
	mock.Mock
}

type GetCardUsecaseIF_Expecter struct {
	mock *mock.Mock
}

func (_m *GetCardUsecaseIF) EXPECT() *GetCardUsecaseIF_Expecter {
	return &GetCardUsecaseIF_Expecter{mock: &_m.Mock}
}

// GetCardsByUserID provides a mock function with given fields: ctx, memberId, enterpriseId
func (_m *GetCardUsecaseIF) GetCardsByUserID(ctx context.Context, memberId string, enterpriseId string) ([]response.CardResponse, error) {
	ret := _m.Called(ctx, memberId, enterpriseId)

	if len(ret) == 0 {
		panic("no return value specified for GetCardsByUserID")
	}

	var r0 []response.CardResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]response.CardResponse, error)); ok {
		return rf(ctx, memberId, enterpriseId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []response.CardResponse); ok {
		r0 = rf(ctx, memberId, enterpriseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.CardResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, memberId, enterpriseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCardUsecaseIF_GetCardsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCardsByUserID'
type GetCardUsecaseIF_GetCardsByUserID_Call struct {
	*mock.Call
}

// GetCardsByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - memberId string
//   - enterpriseId string
func (_e *GetCardUsecaseIF_Expecter) GetCardsByUserID(ctx interface{}, memberId interface{}, enterpriseId interface{}) *GetCardUsecaseIF_GetCardsByUserID_Call {
	return &GetCardUsecaseIF_GetCardsByUserID_Call{Call: _e.mock.On("GetCardsByUserID", ctx, memberId, enterpriseId)}
}

func (_c *GetCardUsecaseIF_GetCardsByUserID_Call) Run(run func(ctx context.Context, memberId string, enterpriseId string)) *GetCardUsecaseIF_GetCardsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *GetCardUsecaseIF_GetCardsByUserID_Call) Return(_a0 []response.CardResponse, _a1 error) *GetCardUsecaseIF_GetCardsByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GetCardUsecaseIF_GetCardsByUserID_Call) RunAndReturn(run func(context.Context, string, string) ([]response.CardResponse, error)) *GetCardUsecaseIF_GetCardsByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// NewGetCardUsecaseIF creates a new instance of GetCardUsecaseIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGetCardUsecaseIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *GetCardUsecaseIF {
	mock := &GetCardUsecaseIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
