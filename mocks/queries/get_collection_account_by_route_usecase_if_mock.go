// Code generated by mockery. DO NOT EDIT.

package queries

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entities "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/domain/entities"
)

// GetCollectionAccountByRouteUsecaseIF is an autogenerated mock type for the GetCollectionAccountByRouteUsecaseIF type
type GetCollectionAccountByRouteUsecaseIF struct {
	mock.Mock
}

type GetCollectionAccountByRouteUsecaseIF_Expecter struct {
	mock *mock.Mock
}

func (_m *GetCollectionAccountByRouteUsecaseIF) EXPECT() *GetCollectionAccountByRouteUsecaseIF_Expecter {
	return &GetCollectionAccountByRouteUsecaseIF_Expecter{mock: &_m.Mock}
}

// GetCollectionAccountByRoute provides a mock function with given fields: ctx, country, associatedOrigin, currency, enterpriseId
func (_m *GetCollectionAccountByRouteUsecaseIF) GetCollectionAccountByRoute(ctx context.Context, country string, associatedOrigin string, currency string, enterpriseId string) (entities.CollectionAccount, error) {
	ret := _m.Called(ctx, country, associatedOrigin, currency, enterpriseId)

	if len(ret) == 0 {
		panic("no return value specified for GetCollectionAccountByRoute")
	}

	var r0 entities.CollectionAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (entities.CollectionAccount, error)); ok {
		return rf(ctx, country, associatedOrigin, currency, enterpriseId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) entities.CollectionAccount); ok {
		r0 = rf(ctx, country, associatedOrigin, currency, enterpriseId)
	} else {
		r0 = ret.Get(0).(entities.CollectionAccount)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, country, associatedOrigin, currency, enterpriseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCollectionAccountByRouteUsecaseIF_GetCollectionAccountByRoute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollectionAccountByRoute'
type GetCollectionAccountByRouteUsecaseIF_GetCollectionAccountByRoute_Call struct {
	*mock.Call
}

// GetCollectionAccountByRoute is a helper method to define mock.On call
//   - ctx context.Context
//   - country string
//   - associatedOrigin string
//   - currency string
//   - enterpriseId string
func (_e *GetCollectionAccountByRouteUsecaseIF_Expecter) GetCollectionAccountByRoute(ctx interface{}, country interface{}, associatedOrigin interface{}, currency interface{}, enterpriseId interface{}) *GetCollectionAccountByRouteUsecaseIF_GetCollectionAccountByRoute_Call {
	return &GetCollectionAccountByRouteUsecaseIF_GetCollectionAccountByRoute_Call{Call: _e.mock.On("GetCollectionAccountByRoute", ctx, country, associatedOrigin, currency, enterpriseId)}
}

func (_c *GetCollectionAccountByRouteUsecaseIF_GetCollectionAccountByRoute_Call) Run(run func(ctx context.Context, country string, associatedOrigin string, currency string, enterpriseId string)) *GetCollectionAccountByRouteUsecaseIF_GetCollectionAccountByRoute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *GetCollectionAccountByRouteUsecaseIF_GetCollectionAccountByRoute_Call) Return(_a0 entities.CollectionAccount, _a1 error) *GetCollectionAccountByRouteUsecaseIF_GetCollectionAccountByRoute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GetCollectionAccountByRouteUsecaseIF_GetCollectionAccountByRoute_Call) RunAndReturn(run func(context.Context, string, string, string, string) (entities.CollectionAccount, error)) *GetCollectionAccountByRouteUsecaseIF_GetCollectionAccountByRoute_Call {
	_c.Call.Return(run)
	return _c
}

// NewGetCollectionAccountByRouteUsecaseIF creates a new instance of GetCollectionAccountByRouteUsecaseIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGetCollectionAccountByRouteUsecaseIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *GetCollectionAccountByRouteUsecaseIF {
	mock := &GetCollectionAccountByRouteUsecaseIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
