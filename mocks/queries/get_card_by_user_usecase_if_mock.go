// Code generated by mockery. DO NOT EDIT.

package queries

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entities "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/domain/entities"
)

// GetCardByUserUsecaseIF is an autogenerated mock type for the GetCardByUserUsecaseIF type
type GetCardByUserUsecaseIF struct {
	mock.Mock
}

type GetCardByUserUsecaseIF_Expecter struct {
	mock *mock.Mock
}

func (_m *GetCardByUserUsecaseIF) EXPECT() *GetCardByUserUsecaseIF_Expecter {
	return &GetCardByUserUsecaseIF_Expecter{mock: &_m.Mock}
}

// GetCardByIDAndUserID provides a mock function with given fields: ctx, userID, cardID, enterpriseID
func (_m *GetCardByUserUsecaseIF) GetCardByIDAndUserID(ctx context.Context, userID string, cardID string, enterpriseID string) (entities.Card, error) {
	ret := _m.Called(ctx, userID, cardID, enterpriseID)

	if len(ret) == 0 {
		panic("no return value specified for GetCardByIDAndUserID")
	}

	var r0 entities.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (entities.Card, error)); ok {
		return rf(ctx, userID, cardID, enterpriseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) entities.Card); ok {
		r0 = rf(ctx, userID, cardID, enterpriseID)
	} else {
		r0 = ret.Get(0).(entities.Card)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, userID, cardID, enterpriseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCardByUserUsecaseIF_GetCardByIDAndUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCardByIDAndUserID'
type GetCardByUserUsecaseIF_GetCardByIDAndUserID_Call struct {
	*mock.Call
}

// GetCardByIDAndUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - cardID string
//   - enterpriseID string
func (_e *GetCardByUserUsecaseIF_Expecter) GetCardByIDAndUserID(ctx interface{}, userID interface{}, cardID interface{}, enterpriseID interface{}) *GetCardByUserUsecaseIF_GetCardByIDAndUserID_Call {
	return &GetCardByUserUsecaseIF_GetCardByIDAndUserID_Call{Call: _e.mock.On("GetCardByIDAndUserID", ctx, userID, cardID, enterpriseID)}
}

func (_c *GetCardByUserUsecaseIF_GetCardByIDAndUserID_Call) Run(run func(ctx context.Context, userID string, cardID string, enterpriseID string)) *GetCardByUserUsecaseIF_GetCardByIDAndUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *GetCardByUserUsecaseIF_GetCardByIDAndUserID_Call) Return(_a0 entities.Card, _a1 error) *GetCardByUserUsecaseIF_GetCardByIDAndUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GetCardByUserUsecaseIF_GetCardByIDAndUserID_Call) RunAndReturn(run func(context.Context, string, string, string) (entities.Card, error)) *GetCardByUserUsecaseIF_GetCardByIDAndUserID_Call {
	_c.Call.Return(run)
	return _c
}

// NewGetCardByUserUsecaseIF creates a new instance of GetCardByUserUsecaseIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGetCardByUserUsecaseIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *GetCardByUserUsecaseIF {
	mock := &GetCardByUserUsecaseIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
