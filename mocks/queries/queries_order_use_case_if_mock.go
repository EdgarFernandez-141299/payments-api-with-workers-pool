// Code generated by mockery. DO NOT EDIT.

package queries

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	response "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/infra/api/handler/order/dto/response"
)

// QueriesOrderUseCaseIF is an autogenerated mock type for the QueriesOrderUseCaseIF type
type QueriesOrderUseCaseIF struct {
	mock.Mock
}

type QueriesOrderUseCaseIF_Expecter struct {
	mock *mock.Mock
}

func (_m *QueriesOrderUseCaseIF) EXPECT() *QueriesOrderUseCaseIF_Expecter {
	return &QueriesOrderUseCaseIF_Expecter{mock: &_m.Mock}
}

// GetOrderDetail provides a mock function with given fields: ctx, orderID, enterpriseID
func (_m *QueriesOrderUseCaseIF) GetOrderDetail(ctx context.Context, orderID string, enterpriseID string) (response.GetOrderResponseDTO, error) {
	ret := _m.Called(ctx, orderID, enterpriseID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderDetail")
	}

	var r0 response.GetOrderResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (response.GetOrderResponseDTO, error)); ok {
		return rf(ctx, orderID, enterpriseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) response.GetOrderResponseDTO); ok {
		r0 = rf(ctx, orderID, enterpriseID)
	} else {
		r0 = ret.Get(0).(response.GetOrderResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, orderID, enterpriseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueriesOrderUseCaseIF_GetOrderDetail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderDetail'
type QueriesOrderUseCaseIF_GetOrderDetail_Call struct {
	*mock.Call
}

// GetOrderDetail is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID string
//   - enterpriseID string
func (_e *QueriesOrderUseCaseIF_Expecter) GetOrderDetail(ctx interface{}, orderID interface{}, enterpriseID interface{}) *QueriesOrderUseCaseIF_GetOrderDetail_Call {
	return &QueriesOrderUseCaseIF_GetOrderDetail_Call{Call: _e.mock.On("GetOrderDetail", ctx, orderID, enterpriseID)}
}

func (_c *QueriesOrderUseCaseIF_GetOrderDetail_Call) Run(run func(ctx context.Context, orderID string, enterpriseID string)) *QueriesOrderUseCaseIF_GetOrderDetail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *QueriesOrderUseCaseIF_GetOrderDetail_Call) Return(_a0 response.GetOrderResponseDTO, _a1 error) *QueriesOrderUseCaseIF_GetOrderDetail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueriesOrderUseCaseIF_GetOrderDetail_Call) RunAndReturn(run func(context.Context, string, string) (response.GetOrderResponseDTO, error)) *QueriesOrderUseCaseIF_GetOrderDetail_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderPayments provides a mock function with given fields: ctx, orderID, enterpriseID
func (_m *QueriesOrderUseCaseIF) GetOrderPayments(ctx context.Context, orderID string, enterpriseID string) (*response.GetOrderPaymentResponseDTO, error) {
	ret := _m.Called(ctx, orderID, enterpriseID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderPayments")
	}

	var r0 *response.GetOrderPaymentResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*response.GetOrderPaymentResponseDTO, error)); ok {
		return rf(ctx, orderID, enterpriseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *response.GetOrderPaymentResponseDTO); ok {
		r0 = rf(ctx, orderID, enterpriseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.GetOrderPaymentResponseDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, orderID, enterpriseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueriesOrderUseCaseIF_GetOrderPayments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderPayments'
type QueriesOrderUseCaseIF_GetOrderPayments_Call struct {
	*mock.Call
}

// GetOrderPayments is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID string
//   - enterpriseID string
func (_e *QueriesOrderUseCaseIF_Expecter) GetOrderPayments(ctx interface{}, orderID interface{}, enterpriseID interface{}) *QueriesOrderUseCaseIF_GetOrderPayments_Call {
	return &QueriesOrderUseCaseIF_GetOrderPayments_Call{Call: _e.mock.On("GetOrderPayments", ctx, orderID, enterpriseID)}
}

func (_c *QueriesOrderUseCaseIF_GetOrderPayments_Call) Run(run func(ctx context.Context, orderID string, enterpriseID string)) *QueriesOrderUseCaseIF_GetOrderPayments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *QueriesOrderUseCaseIF_GetOrderPayments_Call) Return(_a0 *response.GetOrderPaymentResponseDTO, _a1 error) *QueriesOrderUseCaseIF_GetOrderPayments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueriesOrderUseCaseIF_GetOrderPayments_Call) RunAndReturn(run func(context.Context, string, string) (*response.GetOrderPaymentResponseDTO, error)) *QueriesOrderUseCaseIF_GetOrderPayments_Call {
	_c.Call.Return(run)
	return _c
}

// NewQueriesOrderUseCaseIF creates a new instance of QueriesOrderUseCaseIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueriesOrderUseCaseIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueriesOrderUseCaseIF {
	mock := &QueriesOrderUseCaseIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
