// Code generated by mockery. DO NOT EDIT.

package capture_flow

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// CaptureFlowHandlerIF is an autogenerated mock type for the CaptureFlowHandlerIF type
type CaptureFlowHandlerIF struct {
	mock.Mock
}

type CaptureFlowHandlerIF_Expecter struct {
	mock *mock.Mock
}

func (_m *CaptureFlowHandlerIF) EXPECT() *CaptureFlowHandlerIF_Expecter {
	return &CaptureFlowHandlerIF_Expecter{mock: &_m.Mock}
}

// PaymentCapture provides a mock function with given fields: context
func (_m *CaptureFlowHandlerIF) PaymentCapture(context echo.Context) error {
	ret := _m.Called(context)

	if len(ret) == 0 {
		panic("no return value specified for PaymentCapture")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(context)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CaptureFlowHandlerIF_PaymentCapture_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PaymentCapture'
type CaptureFlowHandlerIF_PaymentCapture_Call struct {
	*mock.Call
}

// PaymentCapture is a helper method to define mock.On call
//   - context echo.Context
func (_e *CaptureFlowHandlerIF_Expecter) PaymentCapture(context interface{}) *CaptureFlowHandlerIF_PaymentCapture_Call {
	return &CaptureFlowHandlerIF_PaymentCapture_Call{Call: _e.mock.On("PaymentCapture", context)}
}

func (_c *CaptureFlowHandlerIF_PaymentCapture_Call) Run(run func(context echo.Context)) *CaptureFlowHandlerIF_PaymentCapture_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *CaptureFlowHandlerIF_PaymentCapture_Call) Return(_a0 error) *CaptureFlowHandlerIF_PaymentCapture_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CaptureFlowHandlerIF_PaymentCapture_Call) RunAndReturn(run func(echo.Context) error) *CaptureFlowHandlerIF_PaymentCapture_Call {
	_c.Call.Return(run)
	return _c
}

// PaymentRelease provides a mock function with given fields: context
func (_m *CaptureFlowHandlerIF) PaymentRelease(context echo.Context) error {
	ret := _m.Called(context)

	if len(ret) == 0 {
		panic("no return value specified for PaymentRelease")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(context)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CaptureFlowHandlerIF_PaymentRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PaymentRelease'
type CaptureFlowHandlerIF_PaymentRelease_Call struct {
	*mock.Call
}

// PaymentRelease is a helper method to define mock.On call
//   - context echo.Context
func (_e *CaptureFlowHandlerIF_Expecter) PaymentRelease(context interface{}) *CaptureFlowHandlerIF_PaymentRelease_Call {
	return &CaptureFlowHandlerIF_PaymentRelease_Call{Call: _e.mock.On("PaymentRelease", context)}
}

func (_c *CaptureFlowHandlerIF_PaymentRelease_Call) Run(run func(context echo.Context)) *CaptureFlowHandlerIF_PaymentRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *CaptureFlowHandlerIF_PaymentRelease_Call) Return(_a0 error) *CaptureFlowHandlerIF_PaymentRelease_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CaptureFlowHandlerIF_PaymentRelease_Call) RunAndReturn(run func(echo.Context) error) *CaptureFlowHandlerIF_PaymentRelease_Call {
	_c.Call.Return(run)
	return _c
}

// NewCaptureFlowHandlerIF creates a new instance of CaptureFlowHandlerIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCaptureFlowHandlerIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *CaptureFlowHandlerIF {
	mock := &CaptureFlowHandlerIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
