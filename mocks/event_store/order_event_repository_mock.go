// Code generated by mockery. DO NOT EDIT.

package event_store

import (
	context "context"

	aggregate "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/domain/order/aggregate"

	mock "github.com/stretchr/testify/mock"
)

// OrderEventRepository is an autogenerated mock type for the OrderEventRepository type
type OrderEventRepository struct {
	mock.Mock
}

type OrderEventRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderEventRepository) EXPECT() *OrderEventRepository_Expecter {
	return &OrderEventRepository_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: oldCtx, id, a
func (_m *OrderEventRepository) Get(oldCtx context.Context, id string, a *aggregate.Order) error {
	ret := _m.Called(oldCtx, id, a)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *aggregate.Order) error); ok {
		r0 = rf(oldCtx, id, a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderEventRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type OrderEventRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - oldCtx context.Context
//   - id string
//   - a *aggregate.Order
func (_e *OrderEventRepository_Expecter) Get(oldCtx interface{}, id interface{}, a interface{}) *OrderEventRepository_Get_Call {
	return &OrderEventRepository_Get_Call{Call: _e.mock.On("Get", oldCtx, id, a)}
}

func (_c *OrderEventRepository_Get_Call) Run(run func(oldCtx context.Context, id string, a *aggregate.Order)) *OrderEventRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*aggregate.Order))
	})
	return _c
}

func (_c *OrderEventRepository_Get_Call) Return(_a0 error) *OrderEventRepository_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderEventRepository_Get_Call) RunAndReturn(run func(context.Context, string, *aggregate.Order) error) *OrderEventRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: oldCtx, a
func (_m *OrderEventRepository) Create(oldCtx context.Context, a *aggregate.Order) error {
	ret := _m.Called(oldCtx, a)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *aggregate.Order) error); ok {
		r0 = rf(oldCtx, a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: oldCtx, a
func (_m *OrderEventRepository) Save(oldCtx context.Context, a *aggregate.Order) error {
	ret := _m.Called(oldCtx, a)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *aggregate.Order) error); ok {
		r0 = rf(oldCtx, a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderEventRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type OrderEventRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - oldCtx context.Context
//   - a *aggregate.Order
func (_e *OrderEventRepository_Expecter) Create(oldCtx interface{}, a interface{}) *OrderEventRepository_Create_Call {
	return &OrderEventRepository_Create_Call{Call: _e.mock.On("Create", oldCtx, a)}
}

func (_c *OrderEventRepository_Create_Call) Run(run func(oldCtx context.Context, a *aggregate.Order)) *OrderEventRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*aggregate.Order))
	})
	return _c
}

func (_c *OrderEventRepository_Create_Call) Return(_a0 error) *OrderEventRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderEventRepository_Create_Call) RunAndReturn(run func(context.Context, *aggregate.Order) error) *OrderEventRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// OrderEventRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type OrderEventRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - oldCtx context.Context
//   - a *aggregate.Order
func (_e *OrderEventRepository_Expecter) Save(oldCtx interface{}, a interface{}) *OrderEventRepository_Save_Call {
	return &OrderEventRepository_Save_Call{Call: _e.mock.On("Save", oldCtx, a)}
}

func (_c *OrderEventRepository_Save_Call) Run(run func(oldCtx context.Context, a *aggregate.Order)) *OrderEventRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*aggregate.Order))
	})
	return _c
}

func (_c *OrderEventRepository_Save_Call) Return(_a0 error) *OrderEventRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderEventRepository_Save_Call) RunAndReturn(run func(context.Context, *aggregate.Order) error) *OrderEventRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderEventRepository creates a new instance of OrderEventRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderEventRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderEventRepository {
	mock := &OrderEventRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
