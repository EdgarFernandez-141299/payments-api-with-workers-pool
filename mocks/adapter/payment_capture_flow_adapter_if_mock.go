// Code generated by mockery. DO NOT EDIT.

package adapter

import (
	context "context"

	decimal "github.com/shopspring/decimal"
	mock "github.com/stretchr/testify/mock"
)

// PaymentCaptureFlowAdapterIF is an autogenerated mock type for the PaymentCaptureFlowAdapterIF type
type PaymentCaptureFlowAdapterIF struct {
	mock.Mock
}

type PaymentCaptureFlowAdapterIF_Expecter struct {
	mock *mock.Mock
}

func (_m *PaymentCaptureFlowAdapterIF) EXPECT() *PaymentCaptureFlowAdapterIF_Expecter {
	return &PaymentCaptureFlowAdapterIF_Expecter{mock: &_m.Mock}
}

// CapturePayment provides a mock function with given fields: ctx, orderID, paymentID, paymentTotal
func (_m *PaymentCaptureFlowAdapterIF) CapturePayment(ctx context.Context, orderID string, paymentID string, paymentTotal decimal.Decimal) error {
	ret := _m.Called(ctx, orderID, paymentID, paymentTotal)

	if len(ret) == 0 {
		panic("no return value specified for CapturePayment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, decimal.Decimal) error); ok {
		r0 = rf(ctx, orderID, paymentID, paymentTotal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PaymentCaptureFlowAdapterIF_CapturePayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CapturePayment'
type PaymentCaptureFlowAdapterIF_CapturePayment_Call struct {
	*mock.Call
}

// CapturePayment is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID string
//   - paymentID string
//   - paymentTotal decimal.Decimal
func (_e *PaymentCaptureFlowAdapterIF_Expecter) CapturePayment(ctx interface{}, orderID interface{}, paymentID interface{}, paymentTotal interface{}) *PaymentCaptureFlowAdapterIF_CapturePayment_Call {
	return &PaymentCaptureFlowAdapterIF_CapturePayment_Call{Call: _e.mock.On("CapturePayment", ctx, orderID, paymentID, paymentTotal)}
}

func (_c *PaymentCaptureFlowAdapterIF_CapturePayment_Call) Run(run func(ctx context.Context, orderID string, paymentID string, paymentTotal decimal.Decimal)) *PaymentCaptureFlowAdapterIF_CapturePayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(decimal.Decimal))
	})
	return _c
}

func (_c *PaymentCaptureFlowAdapterIF_CapturePayment_Call) Return(_a0 error) *PaymentCaptureFlowAdapterIF_CapturePayment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PaymentCaptureFlowAdapterIF_CapturePayment_Call) RunAndReturn(run func(context.Context, string, string, decimal.Decimal) error) *PaymentCaptureFlowAdapterIF_CapturePayment_Call {
	_c.Call.Return(run)
	return _c
}

// ReleasePayment provides a mock function with given fields: ctx, orderID, paymentID, reason
func (_m *PaymentCaptureFlowAdapterIF) ReleasePayment(ctx context.Context, orderID string, paymentID string, reason string) error {
	ret := _m.Called(ctx, orderID, paymentID, reason)

	if len(ret) == 0 {
		panic("no return value specified for ReleasePayment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, orderID, paymentID, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PaymentCaptureFlowAdapterIF_ReleasePayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleasePayment'
type PaymentCaptureFlowAdapterIF_ReleasePayment_Call struct {
	*mock.Call
}

// ReleasePayment is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID string
//   - paymentID string
//   - reason string
func (_e *PaymentCaptureFlowAdapterIF_Expecter) ReleasePayment(ctx interface{}, orderID interface{}, paymentID interface{}, reason interface{}) *PaymentCaptureFlowAdapterIF_ReleasePayment_Call {
	return &PaymentCaptureFlowAdapterIF_ReleasePayment_Call{Call: _e.mock.On("ReleasePayment", ctx, orderID, paymentID, reason)}
}

func (_c *PaymentCaptureFlowAdapterIF_ReleasePayment_Call) Run(run func(ctx context.Context, orderID string, paymentID string, reason string)) *PaymentCaptureFlowAdapterIF_ReleasePayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *PaymentCaptureFlowAdapterIF_ReleasePayment_Call) Return(_a0 error) *PaymentCaptureFlowAdapterIF_ReleasePayment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PaymentCaptureFlowAdapterIF_ReleasePayment_Call) RunAndReturn(run func(context.Context, string, string, string) error) *PaymentCaptureFlowAdapterIF_ReleasePayment_Call {
	_c.Call.Return(run)
	return _c
}

// NewPaymentCaptureFlowAdapterIF creates a new instance of PaymentCaptureFlowAdapterIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentCaptureFlowAdapterIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentCaptureFlowAdapterIF {
	mock := &PaymentCaptureFlowAdapterIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
