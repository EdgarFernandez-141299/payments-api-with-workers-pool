// Code generated by mockery. DO NOT EDIT.

package adapter

import (
	aggregate "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/domain/order/aggregate"
	command "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/domain/order/command"

	context "context"

	entities "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// PaymentOrderAdapterIF is an autogenerated mock type for the PaymentOrderAdapterIF type
type PaymentOrderAdapterIF struct {
	mock.Mock
}

type PaymentOrderAdapterIF_Expecter struct {
	mock *mock.Mock
}

func (_m *PaymentOrderAdapterIF) EXPECT() *PaymentOrderAdapterIF_Expecter {
	return &PaymentOrderAdapterIF_Expecter{mock: &_m.Mock}
}

// CreatePaymentOrder provides a mock function with given fields: ctx, cmd, order, card
func (_m *PaymentOrderAdapterIF) CreatePaymentOrder(ctx context.Context, cmd command.CreatePaymentOrderCommand, order *aggregate.Order, card entities.Card) error {
	ret := _m.Called(ctx, cmd, order, card)

	if len(ret) == 0 {
		panic("no return value specified for CreatePaymentOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.CreatePaymentOrderCommand, *aggregate.Order, entities.Card) error); ok {
		r0 = rf(ctx, cmd, order, card)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PaymentOrderAdapterIF_CreatePaymentOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePaymentOrder'
type PaymentOrderAdapterIF_CreatePaymentOrder_Call struct {
	*mock.Call
}

// CreatePaymentOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - cmd command.CreatePaymentOrderCommand
//   - order *aggregate.Order
//   - card entities.Card
func (_e *PaymentOrderAdapterIF_Expecter) CreatePaymentOrder(ctx interface{}, cmd interface{}, order interface{}, card interface{}) *PaymentOrderAdapterIF_CreatePaymentOrder_Call {
	return &PaymentOrderAdapterIF_CreatePaymentOrder_Call{Call: _e.mock.On("CreatePaymentOrder", ctx, cmd, order, card)}
}

func (_c *PaymentOrderAdapterIF_CreatePaymentOrder_Call) Run(run func(ctx context.Context, cmd command.CreatePaymentOrderCommand, order *aggregate.Order, card entities.Card)) *PaymentOrderAdapterIF_CreatePaymentOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(command.CreatePaymentOrderCommand), args[2].(*aggregate.Order), args[3].(entities.Card))
	})
	return _c
}

func (_c *PaymentOrderAdapterIF_CreatePaymentOrder_Call) Return(_a0 error) *PaymentOrderAdapterIF_CreatePaymentOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PaymentOrderAdapterIF_CreatePaymentOrder_Call) RunAndReturn(run func(context.Context, command.CreatePaymentOrderCommand, *aggregate.Order, entities.Card) error) *PaymentOrderAdapterIF_CreatePaymentOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewPaymentOrderAdapterIF creates a new instance of PaymentOrderAdapterIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentOrderAdapterIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentOrderAdapterIF {
	mock := &PaymentOrderAdapterIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
