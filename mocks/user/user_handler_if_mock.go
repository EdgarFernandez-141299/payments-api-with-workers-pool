// Code generated by mockery. DO NOT EDIT.

package user

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// UserHandlerIF is an autogenerated mock type for the UserHandlerIF type
type UserHandlerIF struct {
	mock.Mock
}

type UserHandlerIF_Expecter struct {
	mock *mock.Mock
}

func (_m *UserHandlerIF) EXPECT() *UserHandlerIF_Expecter {
	return &UserHandlerIF_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: context
func (_m *UserHandlerIF) Create(context echo.Context) error {
	ret := _m.Called(context)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(context)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserHandlerIF_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UserHandlerIF_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - context echo.Context
func (_e *UserHandlerIF_Expecter) Create(context interface{}) *UserHandlerIF_Create_Call {
	return &UserHandlerIF_Create_Call{Call: _e.mock.On("Create", context)}
}

func (_c *UserHandlerIF_Create_Call) Run(run func(context echo.Context)) *UserHandlerIF_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *UserHandlerIF_Create_Call) Return(_a0 error) *UserHandlerIF_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserHandlerIF_Create_Call) RunAndReturn(run func(echo.Context) error) *UserHandlerIF_Create_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateUser provides a mock function with given fields: echoCtx
func (_m *UserHandlerIF) ValidateUser(echoCtx echo.Context) error {
	ret := _m.Called(echoCtx)

	if len(ret) == 0 {
		panic("no return value specified for ValidateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(echoCtx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserHandlerIF_ValidateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateUser'
type UserHandlerIF_ValidateUser_Call struct {
	*mock.Call
}

// ValidateUser is a helper method to define mock.On call
//   - echoCtx echo.Context
func (_e *UserHandlerIF_Expecter) ValidateUser(echoCtx interface{}) *UserHandlerIF_ValidateUser_Call {
	return &UserHandlerIF_ValidateUser_Call{Call: _e.mock.On("ValidateUser", echoCtx)}
}

func (_c *UserHandlerIF_ValidateUser_Call) Run(run func(echoCtx echo.Context)) *UserHandlerIF_ValidateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *UserHandlerIF_ValidateUser_Call) Return(_a0 error) *UserHandlerIF_ValidateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserHandlerIF_ValidateUser_Call) RunAndReturn(run func(echo.Context) error) *UserHandlerIF_ValidateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserHandlerIF creates a new instance of UserHandlerIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserHandlerIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserHandlerIF {
	mock := &UserHandlerIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
