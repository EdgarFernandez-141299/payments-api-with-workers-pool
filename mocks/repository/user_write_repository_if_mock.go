// Code generated by mockery. DO NOT EDIT.

package repository

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entities "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/infra/repositories/user/entities"
)

// UserWriteRepositoryIF is an autogenerated mock type for the UserWriteRepositoryIF type
type UserWriteRepositoryIF struct {
	mock.Mock
}

type UserWriteRepositoryIF_Expecter struct {
	mock *mock.Mock
}

func (_m *UserWriteRepositoryIF) EXPECT() *UserWriteRepositoryIF_Expecter {
	return &UserWriteRepositoryIF_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *UserWriteRepositoryIF) CreateUser(ctx context.Context, user entities.UserEntity) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.UserEntity) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserWriteRepositoryIF_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserWriteRepositoryIF_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user entities.UserEntity
func (_e *UserWriteRepositoryIF_Expecter) CreateUser(ctx interface{}, user interface{}) *UserWriteRepositoryIF_CreateUser_Call {
	return &UserWriteRepositoryIF_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *UserWriteRepositoryIF_CreateUser_Call) Run(run func(ctx context.Context, user entities.UserEntity)) *UserWriteRepositoryIF_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.UserEntity))
	})
	return _c
}

func (_c *UserWriteRepositoryIF_CreateUser_Call) Return(_a0 error) *UserWriteRepositoryIF_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserWriteRepositoryIF_CreateUser_Call) RunAndReturn(run func(context.Context, entities.UserEntity) error) *UserWriteRepositoryIF_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserWriteRepositoryIF creates a new instance of UserWriteRepositoryIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserWriteRepositoryIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserWriteRepositoryIF {
	mock := &UserWriteRepositoryIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
