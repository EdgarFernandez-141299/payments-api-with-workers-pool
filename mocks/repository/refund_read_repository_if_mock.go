// Code generated by mockery. DO NOT EDIT.

package repository

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entities "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/infra/repositories/refund/entities"
)

// RefundReadRepositoryIF is an autogenerated mock type for the RefundReadRepositoryIF type
type RefundReadRepositoryIF struct {
	mock.Mock
}

type RefundReadRepositoryIF_Expecter struct {
	mock *mock.Mock
}

func (_m *RefundReadRepositoryIF) EXPECT() *RefundReadRepositoryIF_Expecter {
	return &RefundReadRepositoryIF_Expecter{mock: &_m.Mock}
}

// GetRefundsByReferenceOrderID provides a mock function with given fields: ctx, referenceOrderID, paymentID, enterpriseID
func (_m *RefundReadRepositoryIF) GetRefundsByReferenceOrderID(ctx context.Context, referenceOrderID string, paymentID string, enterpriseID string) ([]entities.RefundEntity, error) {
	ret := _m.Called(ctx, referenceOrderID, paymentID, enterpriseID)

	if len(ret) == 0 {
		panic("no return value specified for GetRefundsByReferenceOrderID")
	}

	var r0 []entities.RefundEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ([]entities.RefundEntity, error)); ok {
		return rf(ctx, referenceOrderID, paymentID, enterpriseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []entities.RefundEntity); ok {
		r0 = rf(ctx, referenceOrderID, paymentID, enterpriseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.RefundEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, referenceOrderID, paymentID, enterpriseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefundReadRepositoryIF_GetRefundsByReferenceOrderID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefundsByReferenceOrderID'
type RefundReadRepositoryIF_GetRefundsByReferenceOrderID_Call struct {
	*mock.Call
}

// GetRefundsByReferenceOrderID is a helper method to define mock.On call
//   - ctx context.Context
//   - referenceOrderID string
//   - paymentID string
//   - enterpriseID string
func (_e *RefundReadRepositoryIF_Expecter) GetRefundsByReferenceOrderID(ctx interface{}, referenceOrderID interface{}, paymentID interface{}, enterpriseID interface{}) *RefundReadRepositoryIF_GetRefundsByReferenceOrderID_Call {
	return &RefundReadRepositoryIF_GetRefundsByReferenceOrderID_Call{Call: _e.mock.On("GetRefundsByReferenceOrderID", ctx, referenceOrderID, paymentID, enterpriseID)}
}

func (_c *RefundReadRepositoryIF_GetRefundsByReferenceOrderID_Call) Run(run func(ctx context.Context, referenceOrderID string, paymentID string, enterpriseID string)) *RefundReadRepositoryIF_GetRefundsByReferenceOrderID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *RefundReadRepositoryIF_GetRefundsByReferenceOrderID_Call) Return(_a0 []entities.RefundEntity, _a1 error) *RefundReadRepositoryIF_GetRefundsByReferenceOrderID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RefundReadRepositoryIF_GetRefundsByReferenceOrderID_Call) RunAndReturn(run func(context.Context, string, string, string) ([]entities.RefundEntity, error)) *RefundReadRepositoryIF_GetRefundsByReferenceOrderID_Call {
	_c.Call.Return(run)
	return _c
}

// NewRefundReadRepositoryIF creates a new instance of RefundReadRepositoryIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRefundReadRepositoryIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *RefundReadRepositoryIF {
	mock := &RefundReadRepositoryIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
