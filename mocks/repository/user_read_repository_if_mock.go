// Code generated by mockery. DO NOT EDIT.

package repository

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entities "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/infra/repositories/user/entities"
)

// UserReadRepositoryIF is an autogenerated mock type for the UserReadRepositoryIF type
type UserReadRepositoryIF struct {
	mock.Mock
}

type UserReadRepositoryIF_Expecter struct {
	mock *mock.Mock
}

func (_m *UserReadRepositoryIF) EXPECT() *UserReadRepositoryIF_Expecter {
	return &UserReadRepositoryIF_Expecter{mock: &_m.Mock}
}

// GetEmailByUserID provides a mock function with given fields: ctx, userID, enterpriseID
func (_m *UserReadRepositoryIF) GetEmailByUserID(ctx context.Context, userID string, enterpriseID string) (string, error) {
	ret := _m.Called(ctx, userID, enterpriseID)

	if len(ret) == 0 {
		panic("no return value specified for GetEmailByUserID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, userID, enterpriseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, userID, enterpriseID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, enterpriseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserReadRepositoryIF_GetEmailByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEmailByUserID'
type UserReadRepositoryIF_GetEmailByUserID_Call struct {
	*mock.Call
}

// GetEmailByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - enterpriseID string
func (_e *UserReadRepositoryIF_Expecter) GetEmailByUserID(ctx interface{}, userID interface{}, enterpriseID interface{}) *UserReadRepositoryIF_GetEmailByUserID_Call {
	return &UserReadRepositoryIF_GetEmailByUserID_Call{Call: _e.mock.On("GetEmailByUserID", ctx, userID, enterpriseID)}
}

func (_c *UserReadRepositoryIF_GetEmailByUserID_Call) Run(run func(ctx context.Context, userID string, enterpriseID string)) *UserReadRepositoryIF_GetEmailByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserReadRepositoryIF_GetEmailByUserID_Call) Return(_a0 string, _a1 error) *UserReadRepositoryIF_GetEmailByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserReadRepositoryIF_GetEmailByUserID_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *UserReadRepositoryIF_GetEmailByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email, enterpriseId
func (_m *UserReadRepositoryIF) GetUserByEmail(ctx context.Context, email string, enterpriseId string) (entities.UserEntity, error) {
	ret := _m.Called(ctx, email, enterpriseId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 entities.UserEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (entities.UserEntity, error)); ok {
		return rf(ctx, email, enterpriseId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entities.UserEntity); ok {
		r0 = rf(ctx, email, enterpriseId)
	} else {
		r0 = ret.Get(0).(entities.UserEntity)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, enterpriseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserReadRepositoryIF_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type UserReadRepositoryIF_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - enterpriseId string
func (_e *UserReadRepositoryIF_Expecter) GetUserByEmail(ctx interface{}, email interface{}, enterpriseId interface{}) *UserReadRepositoryIF_GetUserByEmail_Call {
	return &UserReadRepositoryIF_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email, enterpriseId)}
}

func (_c *UserReadRepositoryIF_GetUserByEmail_Call) Run(run func(ctx context.Context, email string, enterpriseId string)) *UserReadRepositoryIF_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserReadRepositoryIF_GetUserByEmail_Call) Return(_a0 entities.UserEntity, _a1 error) *UserReadRepositoryIF_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserReadRepositoryIF_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string, string) (entities.UserEntity, error)) *UserReadRepositoryIF_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, userID, enterpriseID
func (_m *UserReadRepositoryIF) GetUserByID(ctx context.Context, userID string, enterpriseID string) (entities.UserEntity, error) {
	ret := _m.Called(ctx, userID, enterpriseID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 entities.UserEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (entities.UserEntity, error)); ok {
		return rf(ctx, userID, enterpriseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entities.UserEntity); ok {
		r0 = rf(ctx, userID, enterpriseID)
	} else {
		r0 = ret.Get(0).(entities.UserEntity)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, enterpriseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserReadRepositoryIF_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type UserReadRepositoryIF_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - enterpriseID string
func (_e *UserReadRepositoryIF_Expecter) GetUserByID(ctx interface{}, userID interface{}, enterpriseID interface{}) *UserReadRepositoryIF_GetUserByID_Call {
	return &UserReadRepositoryIF_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, userID, enterpriseID)}
}

func (_c *UserReadRepositoryIF_GetUserByID_Call) Run(run func(ctx context.Context, userID string, enterpriseID string)) *UserReadRepositoryIF_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserReadRepositoryIF_GetUserByID_Call) Return(_a0 entities.UserEntity, _a1 error) *UserReadRepositoryIF_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserReadRepositoryIF_GetUserByID_Call) RunAndReturn(run func(context.Context, string, string) (entities.UserEntity, error)) *UserReadRepositoryIF_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserReadRepositoryIF creates a new instance of UserReadRepositoryIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserReadRepositoryIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserReadRepositoryIF {
	mock := &UserReadRepositoryIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
