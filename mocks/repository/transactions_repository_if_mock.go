// Code generated by mockery. DO NOT EDIT.

package repository

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	enums "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/domain/enums"
)

// TransactionsRepositoryIF is an autogenerated mock type for the TransactionsRepositoryIF type
type TransactionsRepositoryIF struct {
	mock.Mock
}

type TransactionsRepositoryIF_Expecter struct {
	mock *mock.Mock
}

func (_m *TransactionsRepositoryIF) EXPECT() *TransactionsRepositoryIF_Expecter {
	return &TransactionsRepositoryIF_Expecter{mock: &_m.Mock}
}

// UpdatePaymentOrderStatus provides a mock function with given fields: ctx, orderReferenceId, paymentId, enterpriseID, status
func (_m *TransactionsRepositoryIF) UpdatePaymentOrderStatus(ctx context.Context, orderReferenceId string, paymentId string, enterpriseID string, status enums.PaymentStatus) error {
	ret := _m.Called(ctx, orderReferenceId, paymentId, enterpriseID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePaymentOrderStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, enums.PaymentStatus) error); ok {
		r0 = rf(ctx, orderReferenceId, paymentId, enterpriseID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactionsRepositoryIF_UpdatePaymentOrderStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePaymentOrderStatus'
type TransactionsRepositoryIF_UpdatePaymentOrderStatus_Call struct {
	*mock.Call
}

// UpdatePaymentOrderStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - orderReferenceId string
//   - paymentId string
//   - enterpriseID string
//   - status enums.PaymentStatus
func (_e *TransactionsRepositoryIF_Expecter) UpdatePaymentOrderStatus(ctx interface{}, orderReferenceId interface{}, paymentId interface{}, enterpriseID interface{}, status interface{}) *TransactionsRepositoryIF_UpdatePaymentOrderStatus_Call {
	return &TransactionsRepositoryIF_UpdatePaymentOrderStatus_Call{Call: _e.mock.On("UpdatePaymentOrderStatus", ctx, orderReferenceId, paymentId, enterpriseID, status)}
}

func (_c *TransactionsRepositoryIF_UpdatePaymentOrderStatus_Call) Run(run func(ctx context.Context, orderReferenceId string, paymentId string, enterpriseID string, status enums.PaymentStatus)) *TransactionsRepositoryIF_UpdatePaymentOrderStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(enums.PaymentStatus))
	})
	return _c
}

func (_c *TransactionsRepositoryIF_UpdatePaymentOrderStatus_Call) Return(_a0 error) *TransactionsRepositoryIF_UpdatePaymentOrderStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TransactionsRepositoryIF_UpdatePaymentOrderStatus_Call) RunAndReturn(run func(context.Context, string, string, string, enums.PaymentStatus) error) *TransactionsRepositoryIF_UpdatePaymentOrderStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransactionsRepositoryIF creates a new instance of TransactionsRepositoryIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionsRepositoryIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionsRepositoryIF {
	mock := &TransactionsRepositoryIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
