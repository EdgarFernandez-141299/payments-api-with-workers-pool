// Code generated by mockery. DO NOT EDIT.

package repository

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entities "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/infra/repositories/payment_order/entities"
)

// GetPaymentOrderByReferenceIF is an autogenerated mock type for the GetPaymentOrderByReferenceIF type
type GetPaymentOrderByReferenceIF struct {
	mock.Mock
}

type GetPaymentOrderByReferenceIF_Expecter struct {
	mock *mock.Mock
}

func (_m *GetPaymentOrderByReferenceIF) EXPECT() *GetPaymentOrderByReferenceIF_Expecter {
	return &GetPaymentOrderByReferenceIF_Expecter{mock: &_m.Mock}
}

// GetPaymentOrderByReference provides a mock function with given fields: ctx, referenceID, orderID, enterpriseID
func (_m *GetPaymentOrderByReferenceIF) GetPaymentOrderByReference(ctx context.Context, referenceID string, orderID string, enterpriseID string) (entities.PaymentOrderEntity, error) {
	ret := _m.Called(ctx, referenceID, orderID, enterpriseID)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentOrderByReference")
	}

	var r0 entities.PaymentOrderEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (entities.PaymentOrderEntity, error)); ok {
		return rf(ctx, referenceID, orderID, enterpriseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) entities.PaymentOrderEntity); ok {
		r0 = rf(ctx, referenceID, orderID, enterpriseID)
	} else {
		r0 = ret.Get(0).(entities.PaymentOrderEntity)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, referenceID, orderID, enterpriseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentOrderByReferenceIF_GetPaymentOrderByReference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaymentOrderByReference'
type GetPaymentOrderByReferenceIF_GetPaymentOrderByReference_Call struct {
	*mock.Call
}

// GetPaymentOrderByReference is a helper method to define mock.On call
//   - ctx context.Context
//   - referenceID string
//   - orderID string
//   - enterpriseID string
func (_e *GetPaymentOrderByReferenceIF_Expecter) GetPaymentOrderByReference(ctx interface{}, referenceID interface{}, orderID interface{}, enterpriseID interface{}) *GetPaymentOrderByReferenceIF_GetPaymentOrderByReference_Call {
	return &GetPaymentOrderByReferenceIF_GetPaymentOrderByReference_Call{Call: _e.mock.On("GetPaymentOrderByReference", ctx, referenceID, orderID, enterpriseID)}
}

func (_c *GetPaymentOrderByReferenceIF_GetPaymentOrderByReference_Call) Run(run func(ctx context.Context, referenceID string, orderID string, enterpriseID string)) *GetPaymentOrderByReferenceIF_GetPaymentOrderByReference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *GetPaymentOrderByReferenceIF_GetPaymentOrderByReference_Call) Return(_a0 entities.PaymentOrderEntity, _a1 error) *GetPaymentOrderByReferenceIF_GetPaymentOrderByReference_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GetPaymentOrderByReferenceIF_GetPaymentOrderByReference_Call) RunAndReturn(run func(context.Context, string, string, string) (entities.PaymentOrderEntity, error)) *GetPaymentOrderByReferenceIF_GetPaymentOrderByReference_Call {
	_c.Call.Return(run)
	return _c
}

// NewGetPaymentOrderByReferenceIF creates a new instance of GetPaymentOrderByReferenceIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGetPaymentOrderByReferenceIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *GetPaymentOrderByReferenceIF {
	mock := &GetPaymentOrderByReferenceIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
