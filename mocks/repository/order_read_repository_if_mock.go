// Code generated by mockery. DO NOT EDIT.

package repository

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entities "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/infra/repositories/order/entities"

	projections "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/domain/order/projections"
)

// OrderReadRepositoryIF is an autogenerated mock type for the OrderReadRepositoryIF type
type OrderReadRepositoryIF struct {
	mock.Mock
}

type OrderReadRepositoryIF_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderReadRepositoryIF) EXPECT() *OrderReadRepositoryIF_Expecter {
	return &OrderReadRepositoryIF_Expecter{mock: &_m.Mock}
}

// GetOrderByReferenceID provides a mock function with given fields: ctx, referenceOrderID, enterpriseID
func (_m *OrderReadRepositoryIF) GetOrderByReferenceID(ctx context.Context, referenceOrderID string, enterpriseID string) (entities.OrderEntity, error) {
	ret := _m.Called(ctx, referenceOrderID, enterpriseID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderByReferenceID")
	}

	var r0 entities.OrderEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (entities.OrderEntity, error)); ok {
		return rf(ctx, referenceOrderID, enterpriseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entities.OrderEntity); ok {
		r0 = rf(ctx, referenceOrderID, enterpriseID)
	} else {
		r0 = ret.Get(0).(entities.OrderEntity)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, referenceOrderID, enterpriseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderReadRepositoryIF_GetOrderByReferenceID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderByReferenceID'
type OrderReadRepositoryIF_GetOrderByReferenceID_Call struct {
	*mock.Call
}

// GetOrderByReferenceID is a helper method to define mock.On call
//   - ctx context.Context
//   - referenceOrderID string
//   - enterpriseID string
func (_e *OrderReadRepositoryIF_Expecter) GetOrderByReferenceID(ctx interface{}, referenceOrderID interface{}, enterpriseID interface{}) *OrderReadRepositoryIF_GetOrderByReferenceID_Call {
	return &OrderReadRepositoryIF_GetOrderByReferenceID_Call{Call: _e.mock.On("GetOrderByReferenceID", ctx, referenceOrderID, enterpriseID)}
}

func (_c *OrderReadRepositoryIF_GetOrderByReferenceID_Call) Run(run func(ctx context.Context, referenceOrderID string, enterpriseID string)) *OrderReadRepositoryIF_GetOrderByReferenceID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *OrderReadRepositoryIF_GetOrderByReferenceID_Call) Return(_a0 entities.OrderEntity, _a1 error) *OrderReadRepositoryIF_GetOrderByReferenceID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderReadRepositoryIF_GetOrderByReferenceID_Call) RunAndReturn(run func(context.Context, string, string) (entities.OrderEntity, error)) *OrderReadRepositoryIF_GetOrderByReferenceID_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderPayments provides a mock function with given fields: ctx, referenceOrderID, enterpriseID
func (_m *OrderReadRepositoryIF) GetOrderPayments(ctx context.Context, referenceOrderID string, enterpriseID string) ([]projections.OrderPaymentsProjection, error) {
	ret := _m.Called(ctx, referenceOrderID, enterpriseID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderPayments")
	}

	var r0 []projections.OrderPaymentsProjection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]projections.OrderPaymentsProjection, error)); ok {
		return rf(ctx, referenceOrderID, enterpriseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []projections.OrderPaymentsProjection); ok {
		r0 = rf(ctx, referenceOrderID, enterpriseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]projections.OrderPaymentsProjection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, referenceOrderID, enterpriseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderReadRepositoryIF_GetOrderPayments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderPayments'
type OrderReadRepositoryIF_GetOrderPayments_Call struct {
	*mock.Call
}

// GetOrderPayments is a helper method to define mock.On call
//   - ctx context.Context
//   - referenceOrderID string
//   - enterpriseID string
func (_e *OrderReadRepositoryIF_Expecter) GetOrderPayments(ctx interface{}, referenceOrderID interface{}, enterpriseID interface{}) *OrderReadRepositoryIF_GetOrderPayments_Call {
	return &OrderReadRepositoryIF_GetOrderPayments_Call{Call: _e.mock.On("GetOrderPayments", ctx, referenceOrderID, enterpriseID)}
}

func (_c *OrderReadRepositoryIF_GetOrderPayments_Call) Run(run func(ctx context.Context, referenceOrderID string, enterpriseID string)) *OrderReadRepositoryIF_GetOrderPayments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *OrderReadRepositoryIF_GetOrderPayments_Call) Return(_a0 []projections.OrderPaymentsProjection, _a1 error) *OrderReadRepositoryIF_GetOrderPayments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderReadRepositoryIF_GetOrderPayments_Call) RunAndReturn(run func(context.Context, string, string) ([]projections.OrderPaymentsProjection, error)) *OrderReadRepositoryIF_GetOrderPayments_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderReadRepositoryIF creates a new instance of OrderReadRepositoryIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderReadRepositoryIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderReadRepositoryIF {
	mock := &OrderReadRepositoryIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
