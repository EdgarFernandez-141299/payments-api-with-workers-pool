// Code generated by mockery. DO NOT EDIT.

package repository

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entities "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/infra/repositories/payment_order/entities"
)

// PaymentOrderRepositoryIF is an autogenerated mock type for the PaymentOrderRepositoryIF type
type PaymentOrderRepositoryIF struct {
	mock.Mock
}

type PaymentOrderRepositoryIF_Expecter struct {
	mock *mock.Mock
}

func (_m *PaymentOrderRepositoryIF) EXPECT() *PaymentOrderRepositoryIF_Expecter {
	return &PaymentOrderRepositoryIF_Expecter{mock: &_m.Mock}
}

// CreatePaymentOrder provides a mock function with given fields: ctx, entity
func (_m *PaymentOrderRepositoryIF) CreatePaymentOrder(ctx context.Context, entity entities.PaymentOrderEntity) error {
	ret := _m.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for CreatePaymentOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.PaymentOrderEntity) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PaymentOrderRepositoryIF_CreatePaymentOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePaymentOrder'
type PaymentOrderRepositoryIF_CreatePaymentOrder_Call struct {
	*mock.Call
}

// CreatePaymentOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - entity entities.PaymentOrderEntity
func (_e *PaymentOrderRepositoryIF_Expecter) CreatePaymentOrder(ctx interface{}, entity interface{}) *PaymentOrderRepositoryIF_CreatePaymentOrder_Call {
	return &PaymentOrderRepositoryIF_CreatePaymentOrder_Call{Call: _e.mock.On("CreatePaymentOrder", ctx, entity)}
}

func (_c *PaymentOrderRepositoryIF_CreatePaymentOrder_Call) Run(run func(ctx context.Context, entity entities.PaymentOrderEntity)) *PaymentOrderRepositoryIF_CreatePaymentOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.PaymentOrderEntity))
	})
	return _c
}

func (_c *PaymentOrderRepositoryIF_CreatePaymentOrder_Call) Return(_a0 error) *PaymentOrderRepositoryIF_CreatePaymentOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PaymentOrderRepositoryIF_CreatePaymentOrder_Call) RunAndReturn(run func(context.Context, entities.PaymentOrderEntity) error) *PaymentOrderRepositoryIF_CreatePaymentOrder_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePaymentOrder provides a mock function with given fields: ctx, entity
func (_m *PaymentOrderRepositoryIF) UpdatePaymentOrder(ctx context.Context, entity entities.PaymentOrderEntity) error {
	ret := _m.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePaymentOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.PaymentOrderEntity) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PaymentOrderRepositoryIF_UpdatePaymentOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePaymentOrder'
type PaymentOrderRepositoryIF_UpdatePaymentOrder_Call struct {
	*mock.Call
}

// UpdatePaymentOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - entity entities.PaymentOrderEntity
func (_e *PaymentOrderRepositoryIF_Expecter) UpdatePaymentOrder(ctx interface{}, entity interface{}) *PaymentOrderRepositoryIF_UpdatePaymentOrder_Call {
	return &PaymentOrderRepositoryIF_UpdatePaymentOrder_Call{Call: _e.mock.On("UpdatePaymentOrder", ctx, entity)}
}

func (_c *PaymentOrderRepositoryIF_UpdatePaymentOrder_Call) Run(run func(ctx context.Context, entity entities.PaymentOrderEntity)) *PaymentOrderRepositoryIF_UpdatePaymentOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.PaymentOrderEntity))
	})
	return _c
}

func (_c *PaymentOrderRepositoryIF_UpdatePaymentOrder_Call) Return(_a0 error) *PaymentOrderRepositoryIF_UpdatePaymentOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PaymentOrderRepositoryIF_UpdatePaymentOrder_Call) RunAndReturn(run func(context.Context, entities.PaymentOrderEntity) error) *PaymentOrderRepositoryIF_UpdatePaymentOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewPaymentOrderRepositoryIF creates a new instance of PaymentOrderRepositoryIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentOrderRepositoryIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentOrderRepositoryIF {
	mock := &PaymentOrderRepositoryIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
