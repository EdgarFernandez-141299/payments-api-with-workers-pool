// Code generated by mockery. DO NOT EDIT.

package repository

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entities "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/infra/repositories/order/entities"
)

// OrderWriteRepositoryIF is an autogenerated mock type for the OrderWriteRepositoryIF type
type OrderWriteRepositoryIF struct {
	mock.Mock
}

type OrderWriteRepositoryIF_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderWriteRepositoryIF) EXPECT() *OrderWriteRepositoryIF_Expecter {
	return &OrderWriteRepositoryIF_Expecter{mock: &_m.Mock}
}

// CreateOrder provides a mock function with given fields: ctx, entity
func (_m *OrderWriteRepositoryIF) CreateOrder(ctx context.Context, entity entities.OrderEntity) error {
	ret := _m.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.OrderEntity) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderWriteRepositoryIF_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type OrderWriteRepositoryIF_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - entity entities.OrderEntity
func (_e *OrderWriteRepositoryIF_Expecter) CreateOrder(ctx interface{}, entity interface{}) *OrderWriteRepositoryIF_CreateOrder_Call {
	return &OrderWriteRepositoryIF_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, entity)}
}

func (_c *OrderWriteRepositoryIF_CreateOrder_Call) Run(run func(ctx context.Context, entity entities.OrderEntity)) *OrderWriteRepositoryIF_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.OrderEntity))
	})
	return _c
}

func (_c *OrderWriteRepositoryIF_CreateOrder_Call) Return(_a0 error) *OrderWriteRepositoryIF_CreateOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderWriteRepositoryIF_CreateOrder_Call) RunAndReturn(run func(context.Context, entities.OrderEntity) error) *OrderWriteRepositoryIF_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrder provides a mock function with given fields: ctx, entity
func (_m *OrderWriteRepositoryIF) UpdateOrder(ctx context.Context, entity entities.OrderEntity) error {
	ret := _m.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.OrderEntity) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderWriteRepositoryIF_UpdateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrder'
type OrderWriteRepositoryIF_UpdateOrder_Call struct {
	*mock.Call
}

// UpdateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - entity entities.OrderEntity
func (_e *OrderWriteRepositoryIF_Expecter) UpdateOrder(ctx interface{}, entity interface{}) *OrderWriteRepositoryIF_UpdateOrder_Call {
	return &OrderWriteRepositoryIF_UpdateOrder_Call{Call: _e.mock.On("UpdateOrder", ctx, entity)}
}

func (_c *OrderWriteRepositoryIF_UpdateOrder_Call) Run(run func(ctx context.Context, entity entities.OrderEntity)) *OrderWriteRepositoryIF_UpdateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.OrderEntity))
	})
	return _c
}

func (_c *OrderWriteRepositoryIF_UpdateOrder_Call) Return(_a0 error) *OrderWriteRepositoryIF_UpdateOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderWriteRepositoryIF_UpdateOrder_Call) RunAndReturn(run func(context.Context, entities.OrderEntity) error) *OrderWriteRepositoryIF_UpdateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderWriteRepositoryIF creates a new instance of OrderWriteRepositoryIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderWriteRepositoryIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderWriteRepositoryIF {
	mock := &OrderWriteRepositoryIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
