// Code generated by mockery. DO NOT EDIT.

package repository

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entities "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/domain/entities"
)

// PaymentReceiptRepository is an autogenerated mock type for the PaymentReceiptRepository type
type PaymentReceiptRepository struct {
	mock.Mock
}

type PaymentReceiptRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *PaymentReceiptRepository) EXPECT() *PaymentReceiptRepository_Expecter {
	return &PaymentReceiptRepository_Expecter{mock: &_m.Mock}
}

// CreatePaymentReceipt provides a mock function with given fields: ctx, cmd
func (_m *PaymentReceiptRepository) CreatePaymentReceipt(ctx context.Context, cmd entities.PaymentReceipt) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for CreatePaymentReceipt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.PaymentReceipt) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PaymentReceiptRepository_CreatePaymentReceipt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePaymentReceipt'
type PaymentReceiptRepository_CreatePaymentReceipt_Call struct {
	*mock.Call
}

// CreatePaymentReceipt is a helper method to define mock.On call
//   - ctx context.Context
//   - cmd entities.PaymentReceipt
func (_e *PaymentReceiptRepository_Expecter) CreatePaymentReceipt(ctx interface{}, cmd interface{}) *PaymentReceiptRepository_CreatePaymentReceipt_Call {
	return &PaymentReceiptRepository_CreatePaymentReceipt_Call{Call: _e.mock.On("CreatePaymentReceipt", ctx, cmd)}
}

func (_c *PaymentReceiptRepository_CreatePaymentReceipt_Call) Run(run func(ctx context.Context, cmd entities.PaymentReceipt)) *PaymentReceiptRepository_CreatePaymentReceipt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.PaymentReceipt))
	})
	return _c
}

func (_c *PaymentReceiptRepository_CreatePaymentReceipt_Call) Return(_a0 error) *PaymentReceiptRepository_CreatePaymentReceipt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PaymentReceiptRepository_CreatePaymentReceipt_Call) RunAndReturn(run func(context.Context, entities.PaymentReceipt) error) *PaymentReceiptRepository_CreatePaymentReceipt_Call {
	_c.Call.Return(run)
	return _c
}

// GetByPaymentID provides a mock function with given fields: ctx, paymentID
func (_m *PaymentReceiptRepository) GetByPaymentID(ctx context.Context, paymentID string) (entities.PaymentReceipt, error) {
	ret := _m.Called(ctx, paymentID)

	if len(ret) == 0 {
		panic("no return value specified for GetByPaymentID")
	}

	var r0 entities.PaymentReceipt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entities.PaymentReceipt, error)); ok {
		return rf(ctx, paymentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entities.PaymentReceipt); ok {
		r0 = rf(ctx, paymentID)
	} else {
		r0 = ret.Get(0).(entities.PaymentReceipt)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, paymentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentReceiptRepository_GetByPaymentID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByPaymentID'
type PaymentReceiptRepository_GetByPaymentID_Call struct {
	*mock.Call
}

// GetByPaymentID is a helper method to define mock.On call
//   - ctx context.Context
//   - paymentID string
func (_e *PaymentReceiptRepository_Expecter) GetByPaymentID(ctx interface{}, paymentID interface{}) *PaymentReceiptRepository_GetByPaymentID_Call {
	return &PaymentReceiptRepository_GetByPaymentID_Call{Call: _e.mock.On("GetByPaymentID", ctx, paymentID)}
}

func (_c *PaymentReceiptRepository_GetByPaymentID_Call) Run(run func(ctx context.Context, paymentID string)) *PaymentReceiptRepository_GetByPaymentID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PaymentReceiptRepository_GetByPaymentID_Call) Return(_a0 entities.PaymentReceipt, _a1 error) *PaymentReceiptRepository_GetByPaymentID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PaymentReceiptRepository_GetByPaymentID_Call) RunAndReturn(run func(context.Context, string) (entities.PaymentReceipt, error)) *PaymentReceiptRepository_GetByPaymentID_Call {
	_c.Call.Return(run)
	return _c
}

// NewPaymentReceiptRepository creates a new instance of PaymentReceiptRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentReceiptRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentReceiptRepository {
	mock := &PaymentReceiptRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
