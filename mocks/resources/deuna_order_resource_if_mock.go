// Code generated by mockery. DO NOT EDIT.

package resources

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	request "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/application/order/adapters/resources/dto/request"

	response "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/application/order/adapters/resources/dto/response"
)

// DeunaOrderResourceIF is an autogenerated mock type for the DeunaOrderResourceIF type
type DeunaOrderResourceIF struct {
	mock.Mock
}

type DeunaOrderResourceIF_Expecter struct {
	mock *mock.Mock
}

func (_m *DeunaOrderResourceIF) EXPECT() *DeunaOrderResourceIF_Expecter {
	return &DeunaOrderResourceIF_Expecter{mock: &_m.Mock}
}

// CreateOrder provides a mock function with given fields: ctx, body
func (_m *DeunaOrderResourceIF) CreateOrder(ctx context.Context, body request.CreateDeunaOrderRequestDTO) (response.DeunaOrderResponseDTO, error) {
	ret := _m.Called(ctx, body)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 response.DeunaOrderResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.CreateDeunaOrderRequestDTO) (response.DeunaOrderResponseDTO, error)); ok {
		return rf(ctx, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.CreateDeunaOrderRequestDTO) response.DeunaOrderResponseDTO); ok {
		r0 = rf(ctx, body)
	} else {
		r0 = ret.Get(0).(response.DeunaOrderResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.CreateDeunaOrderRequestDTO) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeunaOrderResourceIF_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type DeunaOrderResourceIF_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - body request.CreateDeunaOrderRequestDTO
func (_e *DeunaOrderResourceIF_Expecter) CreateOrder(ctx interface{}, body interface{}) *DeunaOrderResourceIF_CreateOrder_Call {
	return &DeunaOrderResourceIF_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, body)}
}

func (_c *DeunaOrderResourceIF_CreateOrder_Call) Run(run func(ctx context.Context, body request.CreateDeunaOrderRequestDTO)) *DeunaOrderResourceIF_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(request.CreateDeunaOrderRequestDTO))
	})
	return _c
}

func (_c *DeunaOrderResourceIF_CreateOrder_Call) Return(_a0 response.DeunaOrderResponseDTO, _a1 error) *DeunaOrderResourceIF_CreateOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeunaOrderResourceIF_CreateOrder_Call) RunAndReturn(run func(context.Context, request.CreateDeunaOrderRequestDTO) (response.DeunaOrderResponseDTO, error)) *DeunaOrderResourceIF_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// ExpireOrder provides a mock function with given fields: ctx, orderToken
func (_m *DeunaOrderResourceIF) ExpireOrder(ctx context.Context, orderToken string) error {
	ret := _m.Called(ctx, orderToken)

	if len(ret) == 0 {
		panic("no return value specified for ExpireOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, orderToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeunaOrderResourceIF_ExpireOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpireOrder'
type DeunaOrderResourceIF_ExpireOrder_Call struct {
	*mock.Call
}

// ExpireOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - orderToken string
func (_e *DeunaOrderResourceIF_Expecter) ExpireOrder(ctx interface{}, orderToken interface{}) *DeunaOrderResourceIF_ExpireOrder_Call {
	return &DeunaOrderResourceIF_ExpireOrder_Call{Call: _e.mock.On("ExpireOrder", ctx, orderToken)}
}

func (_c *DeunaOrderResourceIF_ExpireOrder_Call) Run(run func(ctx context.Context, orderToken string)) *DeunaOrderResourceIF_ExpireOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DeunaOrderResourceIF_ExpireOrder_Call) Return(_a0 error) *DeunaOrderResourceIF_ExpireOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeunaOrderResourceIF_ExpireOrder_Call) RunAndReturn(run func(context.Context, string) error) *DeunaOrderResourceIF_ExpireOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrder provides a mock function with given fields: ctx, orderToken
func (_m *DeunaOrderResourceIF) GetOrder(ctx context.Context, orderToken string) (response.DeunaOrderResponseDTO, error) {
	ret := _m.Called(ctx, orderToken)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 response.DeunaOrderResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (response.DeunaOrderResponseDTO, error)); ok {
		return rf(ctx, orderToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) response.DeunaOrderResponseDTO); ok {
		r0 = rf(ctx, orderToken)
	} else {
		r0 = ret.Get(0).(response.DeunaOrderResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeunaOrderResourceIF_GetOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrder'
type DeunaOrderResourceIF_GetOrder_Call struct {
	*mock.Call
}

// GetOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - orderToken string
func (_e *DeunaOrderResourceIF_Expecter) GetOrder(ctx interface{}, orderToken interface{}) *DeunaOrderResourceIF_GetOrder_Call {
	return &DeunaOrderResourceIF_GetOrder_Call{Call: _e.mock.On("GetOrder", ctx, orderToken)}
}

func (_c *DeunaOrderResourceIF_GetOrder_Call) Run(run func(ctx context.Context, orderToken string)) *DeunaOrderResourceIF_GetOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DeunaOrderResourceIF_GetOrder_Call) Return(_a0 response.DeunaOrderResponseDTO, _a1 error) *DeunaOrderResourceIF_GetOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeunaOrderResourceIF_GetOrder_Call) RunAndReturn(run func(context.Context, string) (response.DeunaOrderResponseDTO, error)) *DeunaOrderResourceIF_GetOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewDeunaOrderResourceIF creates a new instance of DeunaOrderResourceIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeunaOrderResourceIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeunaOrderResourceIF {
	mock := &DeunaOrderResourceIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
