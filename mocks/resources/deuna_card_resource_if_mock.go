// Code generated by mockery. DO NOT EDIT.

package resources

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	request "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/application/card/adapters/resources/dto/request"

	response "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/application/card/adapters/resources/dto/response"
)

// DeunaCardResourceIF is an autogenerated mock type for the DeunaCardResourceIF type
type DeunaCardResourceIF struct {
	mock.Mock
}

type DeunaCardResourceIF_Expecter struct {
	mock *mock.Mock
}

func (_m *DeunaCardResourceIF) EXPECT() *DeunaCardResourceIF_Expecter {
	return &DeunaCardResourceIF_Expecter{mock: &_m.Mock}
}

// CreateCard provides a mock function with given fields: ctx, body, userID, token
func (_m *DeunaCardResourceIF) CreateCard(ctx context.Context, body request.CreateCardRequestDTO, userID string, token string) (response.CardResponseDataDTO, error) {
	ret := _m.Called(ctx, body, userID, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateCard")
	}

	var r0 response.CardResponseDataDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.CreateCardRequestDTO, string, string) (response.CardResponseDataDTO, error)); ok {
		return rf(ctx, body, userID, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.CreateCardRequestDTO, string, string) response.CardResponseDataDTO); ok {
		r0 = rf(ctx, body, userID, token)
	} else {
		r0 = ret.Get(0).(response.CardResponseDataDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.CreateCardRequestDTO, string, string) error); ok {
		r1 = rf(ctx, body, userID, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeunaCardResourceIF_CreateCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCard'
type DeunaCardResourceIF_CreateCard_Call struct {
	*mock.Call
}

// CreateCard is a helper method to define mock.On call
//   - ctx context.Context
//   - body request.CreateCardRequestDTO
//   - userID string
//   - token string
func (_e *DeunaCardResourceIF_Expecter) CreateCard(ctx interface{}, body interface{}, userID interface{}, token interface{}) *DeunaCardResourceIF_CreateCard_Call {
	return &DeunaCardResourceIF_CreateCard_Call{Call: _e.mock.On("CreateCard", ctx, body, userID, token)}
}

func (_c *DeunaCardResourceIF_CreateCard_Call) Run(run func(ctx context.Context, body request.CreateCardRequestDTO, userID string, token string)) *DeunaCardResourceIF_CreateCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(request.CreateCardRequestDTO), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *DeunaCardResourceIF_CreateCard_Call) Return(_a0 response.CardResponseDataDTO, _a1 error) *DeunaCardResourceIF_CreateCard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeunaCardResourceIF_CreateCard_Call) RunAndReturn(run func(context.Context, request.CreateCardRequestDTO, string, string) (response.CardResponseDataDTO, error)) *DeunaCardResourceIF_CreateCard_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCard provides a mock function with given fields: ctx, body, token
func (_m *DeunaCardResourceIF) DeleteCard(ctx context.Context, body request.DeleteCardRequestDTO, token string) (response.DeleteCardResponseDTO, error) {
	ret := _m.Called(ctx, body, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCard")
	}

	var r0 response.DeleteCardResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.DeleteCardRequestDTO, string) (response.DeleteCardResponseDTO, error)); ok {
		return rf(ctx, body, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.DeleteCardRequestDTO, string) response.DeleteCardResponseDTO); ok {
		r0 = rf(ctx, body, token)
	} else {
		r0 = ret.Get(0).(response.DeleteCardResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.DeleteCardRequestDTO, string) error); ok {
		r1 = rf(ctx, body, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeunaCardResourceIF_DeleteCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCard'
type DeunaCardResourceIF_DeleteCard_Call struct {
	*mock.Call
}

// DeleteCard is a helper method to define mock.On call
//   - ctx context.Context
//   - body request.DeleteCardRequestDTO
//   - token string
func (_e *DeunaCardResourceIF_Expecter) DeleteCard(ctx interface{}, body interface{}, token interface{}) *DeunaCardResourceIF_DeleteCard_Call {
	return &DeunaCardResourceIF_DeleteCard_Call{Call: _e.mock.On("DeleteCard", ctx, body, token)}
}

func (_c *DeunaCardResourceIF_DeleteCard_Call) Run(run func(ctx context.Context, body request.DeleteCardRequestDTO, token string)) *DeunaCardResourceIF_DeleteCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(request.DeleteCardRequestDTO), args[2].(string))
	})
	return _c
}

func (_c *DeunaCardResourceIF_DeleteCard_Call) Return(_a0 response.DeleteCardResponseDTO, _a1 error) *DeunaCardResourceIF_DeleteCard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeunaCardResourceIF_DeleteCard_Call) RunAndReturn(run func(context.Context, request.DeleteCardRequestDTO, string) (response.DeleteCardResponseDTO, error)) *DeunaCardResourceIF_DeleteCard_Call {
	_c.Call.Return(run)
	return _c
}

// NewDeunaCardResourceIF creates a new instance of DeunaCardResourceIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeunaCardResourceIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeunaCardResourceIF {
	mock := &DeunaCardResourceIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
