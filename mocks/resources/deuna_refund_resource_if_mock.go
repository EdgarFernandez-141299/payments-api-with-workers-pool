// Code generated by mockery. DO NOT EDIT.

package resources

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	response "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/application/payment_order/adapters/resources/dto/response"

	utils "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/application/payment_order/adapters/utils"
)

// DeunaRefundResourceIF is an autogenerated mock type for the DeunaRefundResourceIF type
type DeunaRefundResourceIF struct {
	mock.Mock
}

type DeunaRefundResourceIF_Expecter struct {
	mock *mock.Mock
}

func (_m *DeunaRefundResourceIF) EXPECT() *DeunaRefundResourceIF_Expecter {
	return &DeunaRefundResourceIF_Expecter{mock: &_m.Mock}
}

// MakePartialRefund provides a mock function with given fields: ctx, body, orderToken
func (_m *DeunaRefundResourceIF) MakePartialRefund(ctx context.Context, body utils.DeunaPartialRefundRequest, orderToken string) (response.DeunaRefundPaymentResponse, error) {
	ret := _m.Called(ctx, body, orderToken)

	if len(ret) == 0 {
		panic("no return value specified for MakePartialRefund")
	}

	var r0 response.DeunaRefundPaymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, utils.DeunaPartialRefundRequest, string) (response.DeunaRefundPaymentResponse, error)); ok {
		return rf(ctx, body, orderToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, utils.DeunaPartialRefundRequest, string) response.DeunaRefundPaymentResponse); ok {
		r0 = rf(ctx, body, orderToken)
	} else {
		r0 = ret.Get(0).(response.DeunaRefundPaymentResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, utils.DeunaPartialRefundRequest, string) error); ok {
		r1 = rf(ctx, body, orderToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeunaRefundResourceIF_MakePartialRefund_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakePartialRefund'
type DeunaRefundResourceIF_MakePartialRefund_Call struct {
	*mock.Call
}

// MakePartialRefund is a helper method to define mock.On call
//   - ctx context.Context
//   - body utils.DeunaPartialRefundRequest
//   - orderToken string
func (_e *DeunaRefundResourceIF_Expecter) MakePartialRefund(ctx interface{}, body interface{}, orderToken interface{}) *DeunaRefundResourceIF_MakePartialRefund_Call {
	return &DeunaRefundResourceIF_MakePartialRefund_Call{Call: _e.mock.On("MakePartialRefund", ctx, body, orderToken)}
}

func (_c *DeunaRefundResourceIF_MakePartialRefund_Call) Run(run func(ctx context.Context, body utils.DeunaPartialRefundRequest, orderToken string)) *DeunaRefundResourceIF_MakePartialRefund_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(utils.DeunaPartialRefundRequest), args[2].(string))
	})
	return _c
}

func (_c *DeunaRefundResourceIF_MakePartialRefund_Call) Return(_a0 response.DeunaRefundPaymentResponse, _a1 error) *DeunaRefundResourceIF_MakePartialRefund_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeunaRefundResourceIF_MakePartialRefund_Call) RunAndReturn(run func(context.Context, utils.DeunaPartialRefundRequest, string) (response.DeunaRefundPaymentResponse, error)) *DeunaRefundResourceIF_MakePartialRefund_Call {
	_c.Call.Return(run)
	return _c
}

// MakeTotalRefund provides a mock function with given fields: ctx, body, orderToken
func (_m *DeunaRefundResourceIF) MakeTotalRefund(ctx context.Context, body utils.DeunaTotalRefundRequest, orderToken string) (response.DeunaRefundPaymentResponse, error) {
	ret := _m.Called(ctx, body, orderToken)

	if len(ret) == 0 {
		panic("no return value specified for MakeTotalRefund")
	}

	var r0 response.DeunaRefundPaymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, utils.DeunaTotalRefundRequest, string) (response.DeunaRefundPaymentResponse, error)); ok {
		return rf(ctx, body, orderToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, utils.DeunaTotalRefundRequest, string) response.DeunaRefundPaymentResponse); ok {
		r0 = rf(ctx, body, orderToken)
	} else {
		r0 = ret.Get(0).(response.DeunaRefundPaymentResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, utils.DeunaTotalRefundRequest, string) error); ok {
		r1 = rf(ctx, body, orderToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeunaRefundResourceIF_MakeTotalRefund_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeTotalRefund'
type DeunaRefundResourceIF_MakeTotalRefund_Call struct {
	*mock.Call
}

// MakeTotalRefund is a helper method to define mock.On call
//   - ctx context.Context
//   - body utils.DeunaTotalRefundRequest
//   - orderToken string
func (_e *DeunaRefundResourceIF_Expecter) MakeTotalRefund(ctx interface{}, body interface{}, orderToken interface{}) *DeunaRefundResourceIF_MakeTotalRefund_Call {
	return &DeunaRefundResourceIF_MakeTotalRefund_Call{Call: _e.mock.On("MakeTotalRefund", ctx, body, orderToken)}
}

func (_c *DeunaRefundResourceIF_MakeTotalRefund_Call) Run(run func(ctx context.Context, body utils.DeunaTotalRefundRequest, orderToken string)) *DeunaRefundResourceIF_MakeTotalRefund_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(utils.DeunaTotalRefundRequest), args[2].(string))
	})
	return _c
}

func (_c *DeunaRefundResourceIF_MakeTotalRefund_Call) Return(_a0 response.DeunaRefundPaymentResponse, _a1 error) *DeunaRefundResourceIF_MakeTotalRefund_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeunaRefundResourceIF_MakeTotalRefund_Call) RunAndReturn(run func(context.Context, utils.DeunaTotalRefundRequest, string) (response.DeunaRefundPaymentResponse, error)) *DeunaRefundResourceIF_MakeTotalRefund_Call {
	_c.Call.Return(run)
	return _c
}

// NewDeunaRefundResourceIF creates a new instance of DeunaRefundResourceIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeunaRefundResourceIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeunaRefundResourceIF {
	mock := &DeunaRefundResourceIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
