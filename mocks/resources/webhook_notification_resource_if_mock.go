// Code generated by mockery. DO NOT EDIT.

package resources

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	value_objects "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/domain/value_objects"
)

// WebhookNotificationResourceIF is an autogenerated mock type for the WebhookNotificationResourceIF type
type WebhookNotificationResourceIF struct {
	mock.Mock
}

type WebhookNotificationResourceIF_Expecter struct {
	mock *mock.Mock
}

func (_m *WebhookNotificationResourceIF) EXPECT() *WebhookNotificationResourceIF_Expecter {
	return &WebhookNotificationResourceIF_Expecter{mock: &_m.Mock}
}

// SendNotification provides a mock function with given fields: ctx, webhookUrl, payload
func (_m *WebhookNotificationResourceIF) SendNotification(ctx context.Context, webhookUrl value_objects.WebhookUrl, payload interface{}) error {
	ret := _m.Called(ctx, webhookUrl, payload)

	if len(ret) == 0 {
		panic("no return value specified for SendNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, value_objects.WebhookUrl, interface{}) error); ok {
		r0 = rf(ctx, webhookUrl, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WebhookNotificationResourceIF_SendNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendNotification'
type WebhookNotificationResourceIF_SendNotification_Call struct {
	*mock.Call
}

// SendNotification is a helper method to define mock.On call
//   - ctx context.Context
//   - webhookUrl value_objects.WebhookUrl
//   - payload interface{}
func (_e *WebhookNotificationResourceIF_Expecter) SendNotification(ctx interface{}, webhookUrl interface{}, payload interface{}) *WebhookNotificationResourceIF_SendNotification_Call {
	return &WebhookNotificationResourceIF_SendNotification_Call{Call: _e.mock.On("SendNotification", ctx, webhookUrl, payload)}
}

func (_c *WebhookNotificationResourceIF_SendNotification_Call) Run(run func(ctx context.Context, webhookUrl value_objects.WebhookUrl, payload interface{})) *WebhookNotificationResourceIF_SendNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(value_objects.WebhookUrl), args[2].(interface{}))
	})
	return _c
}

func (_c *WebhookNotificationResourceIF_SendNotification_Call) Return(_a0 error) *WebhookNotificationResourceIF_SendNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WebhookNotificationResourceIF_SendNotification_Call) RunAndReturn(run func(context.Context, value_objects.WebhookUrl, interface{}) error) *WebhookNotificationResourceIF_SendNotification_Call {
	_c.Call.Return(run)
	return _c
}

// NewWebhookNotificationResourceIF creates a new instance of WebhookNotificationResourceIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWebhookNotificationResourceIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *WebhookNotificationResourceIF {
	mock := &WebhookNotificationResourceIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
