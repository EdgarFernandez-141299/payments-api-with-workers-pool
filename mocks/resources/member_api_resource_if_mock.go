// Code generated by mockery. DO NOT EDIT.

package resources

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	response "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/application/user/adapters/resources/dto/response"
)

// MemberAPIResourceIF is an autogenerated mock type for the MemberAPIResourceIF type
type MemberAPIResourceIF struct {
	mock.Mock
}

type MemberAPIResourceIF_Expecter struct {
	mock *mock.Mock
}

func (_m *MemberAPIResourceIF) EXPECT() *MemberAPIResourceIF_Expecter {
	return &MemberAPIResourceIF_Expecter{mock: &_m.Mock}
}

// GetMemberByID provides a mock function with given fields: ctx, id, enterpriseId
func (_m *MemberAPIResourceIF) GetMemberByID(ctx context.Context, id string, enterpriseId string) (response.MemberDTO, error) {
	ret := _m.Called(ctx, id, enterpriseId)

	if len(ret) == 0 {
		panic("no return value specified for GetMemberByID")
	}

	var r0 response.MemberDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (response.MemberDTO, error)); ok {
		return rf(ctx, id, enterpriseId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) response.MemberDTO); ok {
		r0 = rf(ctx, id, enterpriseId)
	} else {
		r0 = ret.Get(0).(response.MemberDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, enterpriseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MemberAPIResourceIF_GetMemberByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMemberByID'
type MemberAPIResourceIF_GetMemberByID_Call struct {
	*mock.Call
}

// GetMemberByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - enterpriseId string
func (_e *MemberAPIResourceIF_Expecter) GetMemberByID(ctx interface{}, id interface{}, enterpriseId interface{}) *MemberAPIResourceIF_GetMemberByID_Call {
	return &MemberAPIResourceIF_GetMemberByID_Call{Call: _e.mock.On("GetMemberByID", ctx, id, enterpriseId)}
}

func (_c *MemberAPIResourceIF_GetMemberByID_Call) Run(run func(ctx context.Context, id string, enterpriseId string)) *MemberAPIResourceIF_GetMemberByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MemberAPIResourceIF_GetMemberByID_Call) Return(_a0 response.MemberDTO, _a1 error) *MemberAPIResourceIF_GetMemberByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MemberAPIResourceIF_GetMemberByID_Call) RunAndReturn(run func(context.Context, string, string) (response.MemberDTO, error)) *MemberAPIResourceIF_GetMemberByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserProfileInfo provides a mock function with given fields: oldCtx, userId, enterpriseId
func (_m *MemberAPIResourceIF) GetUserProfileInfo(oldCtx context.Context, userId string, enterpriseId string) (response.UserProfileInfoDTO, error) {
	ret := _m.Called(oldCtx, userId, enterpriseId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserProfileInfo")
	}

	var r0 response.UserProfileInfoDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (response.UserProfileInfoDTO, error)); ok {
		return rf(oldCtx, userId, enterpriseId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) response.UserProfileInfoDTO); ok {
		r0 = rf(oldCtx, userId, enterpriseId)
	} else {
		r0 = ret.Get(0).(response.UserProfileInfoDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(oldCtx, userId, enterpriseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MemberAPIResourceIF_GetUserProfileInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserProfileInfo'
type MemberAPIResourceIF_GetUserProfileInfo_Call struct {
	*mock.Call
}

// GetUserProfileInfo is a helper method to define mock.On call
//   - oldCtx context.Context
//   - userId string
//   - enterpriseId string
func (_e *MemberAPIResourceIF_Expecter) GetUserProfileInfo(oldCtx interface{}, userId interface{}, enterpriseId interface{}) *MemberAPIResourceIF_GetUserProfileInfo_Call {
	return &MemberAPIResourceIF_GetUserProfileInfo_Call{Call: _e.mock.On("GetUserProfileInfo", oldCtx, userId, enterpriseId)}
}

func (_c *MemberAPIResourceIF_GetUserProfileInfo_Call) Run(run func(oldCtx context.Context, userId string, enterpriseId string)) *MemberAPIResourceIF_GetUserProfileInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MemberAPIResourceIF_GetUserProfileInfo_Call) Return(_a0 response.UserProfileInfoDTO, _a1 error) *MemberAPIResourceIF_GetUserProfileInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MemberAPIResourceIF_GetUserProfileInfo_Call) RunAndReturn(run func(context.Context, string, string) (response.UserProfileInfoDTO, error)) *MemberAPIResourceIF_GetUserProfileInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMemberAPIResourceIF creates a new instance of MemberAPIResourceIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMemberAPIResourceIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *MemberAPIResourceIF {
	mock := &MemberAPIResourceIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
