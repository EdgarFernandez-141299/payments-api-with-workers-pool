// Code generated by mockery. DO NOT EDIT.

package resources

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// DeunaCaptureFlowResourceIF is an autogenerated mock type for the DeunaCaptureFlowResourceIF type
type DeunaCaptureFlowResourceIF struct {
	mock.Mock
}

type DeunaCaptureFlowResourceIF_Expecter struct {
	mock *mock.Mock
}

func (_m *DeunaCaptureFlowResourceIF) EXPECT() *DeunaCaptureFlowResourceIF_Expecter {
	return &DeunaCaptureFlowResourceIF_Expecter{mock: &_m.Mock}
}

// Capture provides a mock function with given fields: ctx, orderToken, amount
func (_m *DeunaCaptureFlowResourceIF) Capture(ctx context.Context, orderToken string, amount int64) (bool, error) {
	ret := _m.Called(ctx, orderToken, amount)

	if len(ret) == 0 {
		panic("no return value specified for Capture")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) (bool, error)); ok {
		return rf(ctx, orderToken, amount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) bool); ok {
		r0 = rf(ctx, orderToken, amount)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, orderToken, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeunaCaptureFlowResourceIF_Capture_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Capture'
type DeunaCaptureFlowResourceIF_Capture_Call struct {
	*mock.Call
}

// Capture is a helper method to define mock.On call
//   - ctx context.Context
//   - orderToken string
//   - amount int64
func (_e *DeunaCaptureFlowResourceIF_Expecter) Capture(ctx interface{}, orderToken interface{}, amount interface{}) *DeunaCaptureFlowResourceIF_Capture_Call {
	return &DeunaCaptureFlowResourceIF_Capture_Call{Call: _e.mock.On("Capture", ctx, orderToken, amount)}
}

func (_c *DeunaCaptureFlowResourceIF_Capture_Call) Run(run func(ctx context.Context, orderToken string, amount int64)) *DeunaCaptureFlowResourceIF_Capture_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *DeunaCaptureFlowResourceIF_Capture_Call) Return(_a0 bool, _a1 error) *DeunaCaptureFlowResourceIF_Capture_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeunaCaptureFlowResourceIF_Capture_Call) RunAndReturn(run func(context.Context, string, int64) (bool, error)) *DeunaCaptureFlowResourceIF_Capture_Call {
	_c.Call.Return(run)
	return _c
}

// Release provides a mock function with given fields: ctx, orderToken, reason
func (_m *DeunaCaptureFlowResourceIF) Release(ctx context.Context, orderToken string, reason string) (bool, error) {
	ret := _m.Called(ctx, orderToken, reason)

	if len(ret) == 0 {
		panic("no return value specified for Release")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, orderToken, reason)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, orderToken, reason)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, orderToken, reason)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeunaCaptureFlowResourceIF_Release_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Release'
type DeunaCaptureFlowResourceIF_Release_Call struct {
	*mock.Call
}

// Release is a helper method to define mock.On call
//   - ctx context.Context
//   - orderToken string
//   - reason string
func (_e *DeunaCaptureFlowResourceIF_Expecter) Release(ctx interface{}, orderToken interface{}, reason interface{}) *DeunaCaptureFlowResourceIF_Release_Call {
	return &DeunaCaptureFlowResourceIF_Release_Call{Call: _e.mock.On("Release", ctx, orderToken, reason)}
}

func (_c *DeunaCaptureFlowResourceIF_Release_Call) Run(run func(ctx context.Context, orderToken string, reason string)) *DeunaCaptureFlowResourceIF_Release_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DeunaCaptureFlowResourceIF_Release_Call) Return(_a0 bool, _a1 error) *DeunaCaptureFlowResourceIF_Release_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeunaCaptureFlowResourceIF_Release_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *DeunaCaptureFlowResourceIF_Release_Call {
	_c.Call.Return(run)
	return _c
}

// NewDeunaCaptureFlowResourceIF creates a new instance of DeunaCaptureFlowResourceIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeunaCaptureFlowResourceIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeunaCaptureFlowResourceIF {
	mock := &DeunaCaptureFlowResourceIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
