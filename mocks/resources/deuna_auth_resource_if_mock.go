// Code generated by mockery. DO NOT EDIT.

package resources

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	request "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/application/user/adapters/resources/dto/request"

	response "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/application/user/adapters/resources/dto/response"
)

// DeunaAuthResourceIF is an autogenerated mock type for the DeunaAuthResourceIF type
type DeunaAuthResourceIF struct {
	mock.Mock
}

type DeunaAuthResourceIF_Expecter struct {
	mock *mock.Mock
}

func (_m *DeunaAuthResourceIF) EXPECT() *DeunaAuthResourceIF_Expecter {
	return &DeunaAuthResourceIF_Expecter{mock: &_m.Mock}
}

// AuthUser provides a mock function with given fields: ctx, _a1
func (_m *DeunaAuthResourceIF) AuthUser(ctx context.Context, _a1 request.DeunaAuthUserRequestDTO) (response.DeunaAuthResponseDTO, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AuthUser")
	}

	var r0 response.DeunaAuthResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.DeunaAuthUserRequestDTO) (response.DeunaAuthResponseDTO, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.DeunaAuthUserRequestDTO) response.DeunaAuthResponseDTO); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(response.DeunaAuthResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.DeunaAuthUserRequestDTO) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeunaAuthResourceIF_AuthUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthUser'
type DeunaAuthResourceIF_AuthUser_Call struct {
	*mock.Call
}

// AuthUser is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 request.DeunaAuthUserRequestDTO
func (_e *DeunaAuthResourceIF_Expecter) AuthUser(ctx interface{}, _a1 interface{}) *DeunaAuthResourceIF_AuthUser_Call {
	return &DeunaAuthResourceIF_AuthUser_Call{Call: _e.mock.On("AuthUser", ctx, _a1)}
}

func (_c *DeunaAuthResourceIF_AuthUser_Call) Run(run func(ctx context.Context, _a1 request.DeunaAuthUserRequestDTO)) *DeunaAuthResourceIF_AuthUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(request.DeunaAuthUserRequestDTO))
	})
	return _c
}

func (_c *DeunaAuthResourceIF_AuthUser_Call) Return(_a0 response.DeunaAuthResponseDTO, _a1 error) *DeunaAuthResourceIF_AuthUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeunaAuthResourceIF_AuthUser_Call) RunAndReturn(run func(context.Context, request.DeunaAuthUserRequestDTO) (response.DeunaAuthResponseDTO, error)) *DeunaAuthResourceIF_AuthUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewDeunaAuthResourceIF creates a new instance of DeunaAuthResourceIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeunaAuthResourceIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeunaAuthResourceIF {
	mock := &DeunaAuthResourceIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
