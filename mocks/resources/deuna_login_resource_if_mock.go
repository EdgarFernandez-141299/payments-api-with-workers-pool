// Code generated by mockery. DO NOT EDIT.

package resources

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	request "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/application/user/adapters/resources/dto/request"

	response "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/application/user/adapters/resources/dto/response"
)

// DeunaLoginResourceIF is an autogenerated mock type for the DeunaLoginResourceIF type
type DeunaLoginResourceIF struct {
	mock.Mock
}

type DeunaLoginResourceIF_Expecter struct {
	mock *mock.Mock
}

func (_m *DeunaLoginResourceIF) EXPECT() *DeunaLoginResourceIF_Expecter {
	return &DeunaLoginResourceIF_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, _a1
func (_m *DeunaLoginResourceIF) Login(ctx context.Context, _a1 request.LoginUserDeUnaRequestDTO) (response.LoginResponseDTO, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 response.LoginResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.LoginUserDeUnaRequestDTO) (response.LoginResponseDTO, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.LoginUserDeUnaRequestDTO) response.LoginResponseDTO); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(response.LoginResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.LoginUserDeUnaRequestDTO) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeunaLoginResourceIF_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type DeunaLoginResourceIF_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 request.LoginUserDeUnaRequestDTO
func (_e *DeunaLoginResourceIF_Expecter) Login(ctx interface{}, _a1 interface{}) *DeunaLoginResourceIF_Login_Call {
	return &DeunaLoginResourceIF_Login_Call{Call: _e.mock.On("Login", ctx, _a1)}
}

func (_c *DeunaLoginResourceIF_Login_Call) Run(run func(ctx context.Context, _a1 request.LoginUserDeUnaRequestDTO)) *DeunaLoginResourceIF_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(request.LoginUserDeUnaRequestDTO))
	})
	return _c
}

func (_c *DeunaLoginResourceIF_Login_Call) Return(_a0 response.LoginResponseDTO, _a1 error) *DeunaLoginResourceIF_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeunaLoginResourceIF_Login_Call) RunAndReturn(run func(context.Context, request.LoginUserDeUnaRequestDTO) (response.LoginResponseDTO, error)) *DeunaLoginResourceIF_Login_Call {
	_c.Call.Return(run)
	return _c
}

// NewDeunaLoginResourceIF creates a new instance of DeunaLoginResourceIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeunaLoginResourceIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeunaLoginResourceIF {
	mock := &DeunaLoginResourceIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
