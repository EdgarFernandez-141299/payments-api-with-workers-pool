// Code generated by mockery. DO NOT EDIT.

package usecases

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	request "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/infra/api/handler/collection_account/dto/request"
	response "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/infra/api/handler/collection_account/dto/response"
)

// CollectionAccountUsecaseIF is an autogenerated mock type for the CollectionAccountUsecaseIF type
type CollectionAccountUsecaseIF struct {
	mock.Mock
}

type CollectionAccountUsecaseIF_Expecter struct {
	mock *mock.Mock
}

func (_m *CollectionAccountUsecaseIF) EXPECT() *CollectionAccountUsecaseIF_Expecter {
	return &CollectionAccountUsecaseIF_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, collectionaccount, enterpriseId
func (_m *CollectionAccountUsecaseIF) Create(ctx context.Context, collectionaccount request.CollectionAccountRequest, enterpriseId string) (response.CollectionAccountResponse, error) {
	ret := _m.Called(ctx, collectionaccount, enterpriseId)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 response.CollectionAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.CollectionAccountRequest, string) (response.CollectionAccountResponse, error)); ok {
		return rf(ctx, collectionaccount, enterpriseId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.CollectionAccountRequest, string) response.CollectionAccountResponse); ok {
		r0 = rf(ctx, collectionaccount, enterpriseId)
	} else {
		r0 = ret.Get(0).(response.CollectionAccountResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.CollectionAccountRequest, string) error); ok {
		r1 = rf(ctx, collectionaccount, enterpriseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CollectionAccountUsecaseIF_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type CollectionAccountUsecaseIF_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionaccount request.CollectionAccountRequest
//   - enterpriseId string
func (_e *CollectionAccountUsecaseIF_Expecter) Create(ctx interface{}, collectionaccount interface{}, enterpriseId interface{}) *CollectionAccountUsecaseIF_Create_Call {
	return &CollectionAccountUsecaseIF_Create_Call{Call: _e.mock.On("Create", ctx, collectionaccount, enterpriseId)}
}

func (_c *CollectionAccountUsecaseIF_Create_Call) Run(run func(ctx context.Context, collectionaccount request.CollectionAccountRequest, enterpriseId string)) *CollectionAccountUsecaseIF_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(request.CollectionAccountRequest), args[2].(string))
	})
	return _c
}

func (_c *CollectionAccountUsecaseIF_Create_Call) Return(_a0 response.CollectionAccountResponse, _a1 error) *CollectionAccountUsecaseIF_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CollectionAccountUsecaseIF_Create_Call) RunAndReturn(run func(context.Context, request.CollectionAccountRequest, string) (response.CollectionAccountResponse, error)) *CollectionAccountUsecaseIF_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewCollectionAccountUsecaseIF creates a new instance of CollectionAccountUsecaseIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCollectionAccountUsecaseIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *CollectionAccountUsecaseIF {
	mock := &CollectionAccountUsecaseIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
