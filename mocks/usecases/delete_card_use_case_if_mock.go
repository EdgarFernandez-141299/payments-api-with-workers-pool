// Code generated by mockery. DO NOT EDIT.

package usecases

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	request "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/infra/api/handler/card/dto/request"
	response "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/infra/api/handler/card/dto/response"
)

// DeleteCardUseCaseIF is an autogenerated mock type for the DeleteCardUseCaseIF type
type DeleteCardUseCaseIF struct {
	mock.Mock
}

type DeleteCardUseCaseIF_Expecter struct {
	mock *mock.Mock
}

func (_m *DeleteCardUseCaseIF) EXPECT() *DeleteCardUseCaseIF_Expecter {
	return &DeleteCardUseCaseIF_Expecter{mock: &_m.Mock}
}

// DeleteCard provides a mock function with given fields: ctx, _a1, enterpriseId, userLanguage
func (_m *DeleteCardUseCaseIF) DeleteCard(ctx context.Context, _a1 request.DeleteCardRequest, enterpriseId string, userLanguage string) (response.DeleteCardResponse, error) {
	ret := _m.Called(ctx, _a1, enterpriseId, userLanguage)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCard")
	}

	var r0 response.DeleteCardResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.DeleteCardRequest, string, string) (response.DeleteCardResponse, error)); ok {
		return rf(ctx, _a1, enterpriseId, userLanguage)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.DeleteCardRequest, string, string) response.DeleteCardResponse); ok {
		r0 = rf(ctx, _a1, enterpriseId, userLanguage)
	} else {
		r0 = ret.Get(0).(response.DeleteCardResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.DeleteCardRequest, string, string) error); ok {
		r1 = rf(ctx, _a1, enterpriseId, userLanguage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCardUseCaseIF_DeleteCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCard'
type DeleteCardUseCaseIF_DeleteCard_Call struct {
	*mock.Call
}

// DeleteCard is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 request.DeleteCardRequest
//   - enterpriseId string
//   - userLanguage string
func (_e *DeleteCardUseCaseIF_Expecter) DeleteCard(ctx interface{}, _a1 interface{}, enterpriseId interface{}, userLanguage interface{}) *DeleteCardUseCaseIF_DeleteCard_Call {
	return &DeleteCardUseCaseIF_DeleteCard_Call{Call: _e.mock.On("DeleteCard", ctx, _a1, enterpriseId, userLanguage)}
}

func (_c *DeleteCardUseCaseIF_DeleteCard_Call) Run(run func(ctx context.Context, _a1 request.DeleteCardRequest, enterpriseId string, userLanguage string)) *DeleteCardUseCaseIF_DeleteCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(request.DeleteCardRequest), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *DeleteCardUseCaseIF_DeleteCard_Call) Return(_a0 response.DeleteCardResponse, _a1 error) *DeleteCardUseCaseIF_DeleteCard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeleteCardUseCaseIF_DeleteCard_Call) RunAndReturn(run func(context.Context, request.DeleteCardRequest, string, string) (response.DeleteCardResponse, error)) *DeleteCardUseCaseIF_DeleteCard_Call {
	_c.Call.Return(run)
	return _c
}

// NewDeleteCardUseCaseIF creates a new instance of DeleteCardUseCaseIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeleteCardUseCaseIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeleteCardUseCaseIF {
	mock := &DeleteCardUseCaseIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
