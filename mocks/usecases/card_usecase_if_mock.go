// Code generated by mockery. DO NOT EDIT.

package usecases

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	request "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/infra/api/handler/card/dto/request"
	response "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/infra/api/handler/card/dto/response"
)

// CardUsecaseIF is an autogenerated mock type for the CardUsecaseIF type
type CardUsecaseIF struct {
	mock.Mock
}

type CardUsecaseIF_Expecter struct {
	mock *mock.Mock
}

func (_m *CardUsecaseIF) EXPECT() *CardUsecaseIF_Expecter {
	return &CardUsecaseIF_Expecter{mock: &_m.Mock}
}

// CreateCard provides a mock function with given fields: ctx, _a1, enterpriseId, preferredLanguage
func (_m *CardUsecaseIF) CreateCard(ctx context.Context, _a1 request.CardRequest, enterpriseId string, preferredLanguage string) (response.CardResponse, error) {
	ret := _m.Called(ctx, _a1, enterpriseId, preferredLanguage)

	if len(ret) == 0 {
		panic("no return value specified for CreateCard")
	}

	var r0 response.CardResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.CardRequest, string, string) (response.CardResponse, error)); ok {
		return rf(ctx, _a1, enterpriseId, preferredLanguage)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.CardRequest, string, string) response.CardResponse); ok {
		r0 = rf(ctx, _a1, enterpriseId, preferredLanguage)
	} else {
		r0 = ret.Get(0).(response.CardResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.CardRequest, string, string) error); ok {
		r1 = rf(ctx, _a1, enterpriseId, preferredLanguage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CardUsecaseIF_CreateCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCard'
type CardUsecaseIF_CreateCard_Call struct {
	*mock.Call
}

// CreateCard is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 request.CardRequest
//   - enterpriseId string
//   - preferredLanguage string
func (_e *CardUsecaseIF_Expecter) CreateCard(ctx interface{}, _a1 interface{}, enterpriseId interface{}, preferredLanguage interface{}) *CardUsecaseIF_CreateCard_Call {
	return &CardUsecaseIF_CreateCard_Call{Call: _e.mock.On("CreateCard", ctx, _a1, enterpriseId, preferredLanguage)}
}

func (_c *CardUsecaseIF_CreateCard_Call) Run(run func(ctx context.Context, _a1 request.CardRequest, enterpriseId string, preferredLanguage string)) *CardUsecaseIF_CreateCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(request.CardRequest), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *CardUsecaseIF_CreateCard_Call) Return(_a0 response.CardResponse, _a1 error) *CardUsecaseIF_CreateCard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CardUsecaseIF_CreateCard_Call) RunAndReturn(run func(context.Context, request.CardRequest, string, string) (response.CardResponse, error)) *CardUsecaseIF_CreateCard_Call {
	_c.Call.Return(run)
	return _c
}

// TriggerCardExpiringSoonNotifications provides a mock function with given fields: ctx, _a1
func (_m *CardUsecaseIF) TriggerCardExpiringSoonNotifications(ctx context.Context, _a1 request.NotificationCardExpiringSoonRequestDTO) (response.NotificationCardExpiringSoonResponseDTO, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for TriggerCardExpiringSoonNotifications")
	}

	var r0 response.NotificationCardExpiringSoonResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.NotificationCardExpiringSoonRequestDTO) (response.NotificationCardExpiringSoonResponseDTO, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.NotificationCardExpiringSoonRequestDTO) response.NotificationCardExpiringSoonResponseDTO); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(response.NotificationCardExpiringSoonResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.NotificationCardExpiringSoonRequestDTO) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CardUsecaseIF_TriggerCardExpiringSoonNotifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TriggerCardExpiringSoonNotifications'
type CardUsecaseIF_TriggerCardExpiringSoonNotifications_Call struct {
	*mock.Call
}

// TriggerCardExpiringSoonNotifications is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 request.NotificationCardExpiringSoonRequestDTO
func (_e *CardUsecaseIF_Expecter) TriggerCardExpiringSoonNotifications(ctx interface{}, _a1 interface{}) *CardUsecaseIF_TriggerCardExpiringSoonNotifications_Call {
	return &CardUsecaseIF_TriggerCardExpiringSoonNotifications_Call{Call: _e.mock.On("TriggerCardExpiringSoonNotifications", ctx, _a1)}
}

func (_c *CardUsecaseIF_TriggerCardExpiringSoonNotifications_Call) Run(run func(ctx context.Context, _a1 request.NotificationCardExpiringSoonRequestDTO)) *CardUsecaseIF_TriggerCardExpiringSoonNotifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(request.NotificationCardExpiringSoonRequestDTO))
	})
	return _c
}

func (_c *CardUsecaseIF_TriggerCardExpiringSoonNotifications_Call) Return(_a0 response.NotificationCardExpiringSoonResponseDTO, _a1 error) *CardUsecaseIF_TriggerCardExpiringSoonNotifications_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CardUsecaseIF_TriggerCardExpiringSoonNotifications_Call) RunAndReturn(run func(context.Context, request.NotificationCardExpiringSoonRequestDTO) (response.NotificationCardExpiringSoonResponseDTO, error)) *CardUsecaseIF_TriggerCardExpiringSoonNotifications_Call {
	_c.Call.Return(run)
	return _c
}

// NewCardUsecaseIF creates a new instance of CardUsecaseIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCardUsecaseIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *CardUsecaseIF {
	mock := &CardUsecaseIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
