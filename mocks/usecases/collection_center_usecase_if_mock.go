// Code generated by mockery. DO NOT EDIT.

package usecases

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	request "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/infra/api/handler/collection_center/dto/request"
	response "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/infra/api/handler/collection_center/dto/response"
)

// CollectionCenterUsecaseIF is an autogenerated mock type for the CollectionCenterUsecaseIF type
type CollectionCenterUsecaseIF struct {
	mock.Mock
}

type CollectionCenterUsecaseIF_Expecter struct {
	mock *mock.Mock
}

func (_m *CollectionCenterUsecaseIF) EXPECT() *CollectionCenterUsecaseIF_Expecter {
	return &CollectionCenterUsecaseIF_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, _a1, enterpriseID
func (_m *CollectionCenterUsecaseIF) Create(ctx context.Context, _a1 request.CollectionCenterRequest, enterpriseID string) (response.CollectionCenterResponse, error) {
	ret := _m.Called(ctx, _a1, enterpriseID)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 response.CollectionCenterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.CollectionCenterRequest, string) (response.CollectionCenterResponse, error)); ok {
		return rf(ctx, _a1, enterpriseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.CollectionCenterRequest, string) response.CollectionCenterResponse); ok {
		r0 = rf(ctx, _a1, enterpriseID)
	} else {
		r0 = ret.Get(0).(response.CollectionCenterResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.CollectionCenterRequest, string) error); ok {
		r1 = rf(ctx, _a1, enterpriseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CollectionCenterUsecaseIF_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type CollectionCenterUsecaseIF_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 request.CollectionCenterRequest
//   - enterpriseID string
func (_e *CollectionCenterUsecaseIF_Expecter) Create(ctx interface{}, _a1 interface{}, enterpriseID interface{}) *CollectionCenterUsecaseIF_Create_Call {
	return &CollectionCenterUsecaseIF_Create_Call{Call: _e.mock.On("Create", ctx, _a1, enterpriseID)}
}

func (_c *CollectionCenterUsecaseIF_Create_Call) Run(run func(ctx context.Context, _a1 request.CollectionCenterRequest, enterpriseID string)) *CollectionCenterUsecaseIF_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(request.CollectionCenterRequest), args[2].(string))
	})
	return _c
}

func (_c *CollectionCenterUsecaseIF_Create_Call) Return(_a0 response.CollectionCenterResponse, _a1 error) *CollectionCenterUsecaseIF_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CollectionCenterUsecaseIF_Create_Call) RunAndReturn(run func(context.Context, request.CollectionCenterRequest, string) (response.CollectionCenterResponse, error)) *CollectionCenterUsecaseIF_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewCollectionCenterUsecaseIF creates a new instance of CollectionCenterUsecaseIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCollectionCenterUsecaseIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *CollectionCenterUsecaseIF {
	mock := &CollectionCenterUsecaseIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
