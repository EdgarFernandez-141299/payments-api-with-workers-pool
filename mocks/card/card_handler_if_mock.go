// Code generated by mockery. DO NOT EDIT.

package card

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// CardHandlerIF is an autogenerated mock type for the CardHandlerIF type
type CardHandlerIF struct {
	mock.Mock
}

type CardHandlerIF_Expecter struct {
	mock *mock.Mock
}

func (_m *CardHandlerIF) EXPECT() *CardHandlerIF_Expecter {
	return &CardHandlerIF_Expecter{mock: &_m.Mock}
}

// CreateCard provides a mock function with given fields: context
func (_m *CardHandlerIF) CreateCard(context echo.Context) error {
	ret := _m.Called(context)

	if len(ret) == 0 {
		panic("no return value specified for CreateCard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(context)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CardHandlerIF_CreateCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCard'
type CardHandlerIF_CreateCard_Call struct {
	*mock.Call
}

// CreateCard is a helper method to define mock.On call
//   - context echo.Context
func (_e *CardHandlerIF_Expecter) CreateCard(context interface{}) *CardHandlerIF_CreateCard_Call {
	return &CardHandlerIF_CreateCard_Call{Call: _e.mock.On("CreateCard", context)}
}

func (_c *CardHandlerIF_CreateCard_Call) Run(run func(context echo.Context)) *CardHandlerIF_CreateCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *CardHandlerIF_CreateCard_Call) Return(_a0 error) *CardHandlerIF_CreateCard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CardHandlerIF_CreateCard_Call) RunAndReturn(run func(echo.Context) error) *CardHandlerIF_CreateCard_Call {
	_c.Call.Return(run)
	return _c
}

// GetCardsByUserID provides a mock function with given fields: context
func (_m *CardHandlerIF) GetCardsByUserID(context echo.Context) error {
	ret := _m.Called(context)

	if len(ret) == 0 {
		panic("no return value specified for GetCardsByUserID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(context)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CardHandlerIF_GetCardsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCardsByUserID'
type CardHandlerIF_GetCardsByUserID_Call struct {
	*mock.Call
}

// GetCardsByUserID is a helper method to define mock.On call
//   - context echo.Context
func (_e *CardHandlerIF_Expecter) GetCardsByUserID(context interface{}) *CardHandlerIF_GetCardsByUserID_Call {
	return &CardHandlerIF_GetCardsByUserID_Call{Call: _e.mock.On("GetCardsByUserID", context)}
}

func (_c *CardHandlerIF_GetCardsByUserID_Call) Run(run func(context echo.Context)) *CardHandlerIF_GetCardsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *CardHandlerIF_GetCardsByUserID_Call) Return(_a0 error) *CardHandlerIF_GetCardsByUserID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CardHandlerIF_GetCardsByUserID_Call) RunAndReturn(run func(echo.Context) error) *CardHandlerIF_GetCardsByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// TriggerExpiringSoonNotifications provides a mock function with given fields: context
func (_m *CardHandlerIF) TriggerExpiringSoonNotifications(context echo.Context) error {
	ret := _m.Called(context)

	if len(ret) == 0 {
		panic("no return value specified for TriggerExpiringSoonNotifications")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(context)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CardHandlerIF_TriggerExpiringSoonNotifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TriggerExpiringSoonNotifications'
type CardHandlerIF_TriggerExpiringSoonNotifications_Call struct {
	*mock.Call
}

// TriggerExpiringSoonNotifications is a helper method to define mock.On call
//   - context echo.Context
func (_e *CardHandlerIF_Expecter) TriggerExpiringSoonNotifications(context interface{}) *CardHandlerIF_TriggerExpiringSoonNotifications_Call {
	return &CardHandlerIF_TriggerExpiringSoonNotifications_Call{Call: _e.mock.On("TriggerExpiringSoonNotifications", context)}
}

func (_c *CardHandlerIF_TriggerExpiringSoonNotifications_Call) Run(run func(context echo.Context)) *CardHandlerIF_TriggerExpiringSoonNotifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *CardHandlerIF_TriggerExpiringSoonNotifications_Call) Return(_a0 error) *CardHandlerIF_TriggerExpiringSoonNotifications_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CardHandlerIF_TriggerExpiringSoonNotifications_Call) RunAndReturn(run func(echo.Context) error) *CardHandlerIF_TriggerExpiringSoonNotifications_Call {
	_c.Call.Return(run)
	return _c
}

// NewCardHandlerIF creates a new instance of CardHandlerIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCardHandlerIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *CardHandlerIF {
	mock := &CardHandlerIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
