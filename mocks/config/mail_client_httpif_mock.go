// Code generated by mockery. DO NOT EDIT.

package config

import (
	mock "github.com/stretchr/testify/mock"
	instrument "gitlab.com/clubhub.ai1/go-libraries/observability/clients/http/instrument"
)

// MailClientHTTPIF is an autogenerated mock type for the MailClientHTTPIF type
type MailClientHTTPIF struct {
	mock.Mock
}

type MailClientHTTPIF_Expecter struct {
	mock *mock.Mock
}

func (_m *MailClientHTTPIF) EXPECT() *MailClientHTTPIF_Expecter {
	return &MailClientHTTPIF_Expecter{mock: &_m.Mock}
}

// NewRequest provides a mock function with no fields
func (_m *MailClientHTTPIF) NewRequest() instrument.IRequest {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewRequest")
	}

	var r0 instrument.IRequest
	if rf, ok := ret.Get(0).(func() instrument.IRequest); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(instrument.IRequest)
		}
	}

	return r0
}

// MailClientHTTPIF_NewRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewRequest'
type MailClientHTTPIF_NewRequest_Call struct {
	*mock.Call
}

// NewRequest is a helper method to define mock.On call
func (_e *MailClientHTTPIF_Expecter) NewRequest() *MailClientHTTPIF_NewRequest_Call {
	return &MailClientHTTPIF_NewRequest_Call{Call: _e.mock.On("NewRequest")}
}

func (_c *MailClientHTTPIF_NewRequest_Call) Run(run func()) *MailClientHTTPIF_NewRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MailClientHTTPIF_NewRequest_Call) Return(_a0 instrument.IRequest) *MailClientHTTPIF_NewRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MailClientHTTPIF_NewRequest_Call) RunAndReturn(run func() instrument.IRequest) *MailClientHTTPIF_NewRequest_Call {
	_c.Call.Return(run)
	return _c
}

// NewRequestWithOptions provides a mock function with given fields: _a0
func (_m *MailClientHTTPIF) NewRequestWithOptions(_a0 ...instrument.RequestClientOption) instrument.IRequest {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NewRequestWithOptions")
	}

	var r0 instrument.IRequest
	if rf, ok := ret.Get(0).(func(...instrument.RequestClientOption) instrument.IRequest); ok {
		r0 = rf(_a0...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(instrument.IRequest)
		}
	}

	return r0
}

// MailClientHTTPIF_NewRequestWithOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewRequestWithOptions'
type MailClientHTTPIF_NewRequestWithOptions_Call struct {
	*mock.Call
}

// NewRequestWithOptions is a helper method to define mock.On call
//   - _a0 ...instrument.RequestClientOption
func (_e *MailClientHTTPIF_Expecter) NewRequestWithOptions(_a0 ...interface{}) *MailClientHTTPIF_NewRequestWithOptions_Call {
	return &MailClientHTTPIF_NewRequestWithOptions_Call{Call: _e.mock.On("NewRequestWithOptions",
		append([]interface{}{}, _a0...)...)}
}

func (_c *MailClientHTTPIF_NewRequestWithOptions_Call) Run(run func(_a0 ...instrument.RequestClientOption)) *MailClientHTTPIF_NewRequestWithOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]instrument.RequestClientOption, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(instrument.RequestClientOption)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MailClientHTTPIF_NewRequestWithOptions_Call) Return(_a0 instrument.IRequest) *MailClientHTTPIF_NewRequestWithOptions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MailClientHTTPIF_NewRequestWithOptions_Call) RunAndReturn(run func(...instrument.RequestClientOption) instrument.IRequest) *MailClientHTTPIF_NewRequestWithOptions_Call {
	_c.Call.Return(run)
	return _c
}

// NewMailClientHTTPIF creates a new instance of MailClientHTTPIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMailClientHTTPIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *MailClientHTTPIF {
	mock := &MailClientHTTPIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
