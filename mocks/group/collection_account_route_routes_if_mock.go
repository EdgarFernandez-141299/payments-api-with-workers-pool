// Code generated by mockery. DO NOT EDIT.

package group

import (
	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"
)

// CollectionAccountRouteRoutesIF is an autogenerated mock type for the CollectionAccountRouteRoutesIF type
type CollectionAccountRouteRoutesIF struct {
	mock.Mock
}

type CollectionAccountRouteRoutesIF_Expecter struct {
	mock *mock.Mock
}

func (_m *CollectionAccountRouteRoutesIF) EXPECT() *CollectionAccountRouteRoutesIF_Expecter {
	return &CollectionAccountRouteRoutesIF_Expecter{mock: &_m.Mock}
}

// Resource provides a mock function with given fields: c
func (_m *CollectionAccountRouteRoutesIF) Resource(c *echo.Group) {
	_m.Called(c)
}

// CollectionAccountRouteRoutesIF_Resource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resource'
type CollectionAccountRouteRoutesIF_Resource_Call struct {
	*mock.Call
}

// Resource is a helper method to define mock.On call
//   - c *echo.Group
func (_e *CollectionAccountRouteRoutesIF_Expecter) Resource(c interface{}) *CollectionAccountRouteRoutesIF_Resource_Call {
	return &CollectionAccountRouteRoutesIF_Resource_Call{Call: _e.mock.On("Resource", c)}
}

func (_c *CollectionAccountRouteRoutesIF_Resource_Call) Run(run func(c *echo.Group)) *CollectionAccountRouteRoutesIF_Resource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*echo.Group))
	})
	return _c
}

func (_c *CollectionAccountRouteRoutesIF_Resource_Call) Return() *CollectionAccountRouteRoutesIF_Resource_Call {
	_c.Call.Return()
	return _c
}

func (_c *CollectionAccountRouteRoutesIF_Resource_Call) RunAndReturn(run func(*echo.Group)) *CollectionAccountRouteRoutesIF_Resource_Call {
	_c.Run(run)
	return _c
}

// NewCollectionAccountRouteRoutesIF creates a new instance of CollectionAccountRouteRoutesIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCollectionAccountRouteRoutesIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *CollectionAccountRouteRoutesIF {
	mock := &CollectionAccountRouteRoutesIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
