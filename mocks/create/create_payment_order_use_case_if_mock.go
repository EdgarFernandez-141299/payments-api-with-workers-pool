// Code generated by mockery. DO NOT EDIT.

package create

import (
	context "context"

	command "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/domain/order/command"

	mock "github.com/stretchr/testify/mock"

	response "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/infra/api/handler/order/dto/response"
)

// CreatePaymentOrderUseCaseIF is an autogenerated mock type for the CreatePaymentOrderUseCaseIF type
type CreatePaymentOrderUseCaseIF struct {
	mock.Mock
}

type CreatePaymentOrderUseCaseIF_Expecter struct {
	mock *mock.Mock
}

func (_m *CreatePaymentOrderUseCaseIF) EXPECT() *CreatePaymentOrderUseCaseIF_Expecter {
	return &CreatePaymentOrderUseCaseIF_Expecter{mock: &_m.Mock}
}

// CreatePaymentOrder provides a mock function with given fields: ctx, cmd
func (_m *CreatePaymentOrderUseCaseIF) CreatePaymentOrder(ctx context.Context, cmd command.CreatePaymentOrderCommand) (response.PaymentOrderResponseDTO, error) {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for CreatePaymentOrder")
	}

	var r0 response.PaymentOrderResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, command.CreatePaymentOrderCommand) (response.PaymentOrderResponseDTO, error)); ok {
		return rf(ctx, cmd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, command.CreatePaymentOrderCommand) response.PaymentOrderResponseDTO); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Get(0).(response.PaymentOrderResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, command.CreatePaymentOrderCommand) error); ok {
		r1 = rf(ctx, cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePaymentOrderUseCaseIF_CreatePaymentOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePaymentOrder'
type CreatePaymentOrderUseCaseIF_CreatePaymentOrder_Call struct {
	*mock.Call
}

// CreatePaymentOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - cmd command.CreatePaymentOrderCommand
func (_e *CreatePaymentOrderUseCaseIF_Expecter) CreatePaymentOrder(ctx interface{}, cmd interface{}) *CreatePaymentOrderUseCaseIF_CreatePaymentOrder_Call {
	return &CreatePaymentOrderUseCaseIF_CreatePaymentOrder_Call{Call: _e.mock.On("CreatePaymentOrder", ctx, cmd)}
}

func (_c *CreatePaymentOrderUseCaseIF_CreatePaymentOrder_Call) Run(run func(ctx context.Context, cmd command.CreatePaymentOrderCommand)) *CreatePaymentOrderUseCaseIF_CreatePaymentOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(command.CreatePaymentOrderCommand))
	})
	return _c
}

func (_c *CreatePaymentOrderUseCaseIF_CreatePaymentOrder_Call) Return(_a0 response.PaymentOrderResponseDTO, _a1 error) *CreatePaymentOrderUseCaseIF_CreatePaymentOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CreatePaymentOrderUseCaseIF_CreatePaymentOrder_Call) RunAndReturn(run func(context.Context, command.CreatePaymentOrderCommand) (response.PaymentOrderResponseDTO, error)) *CreatePaymentOrderUseCaseIF_CreatePaymentOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewCreatePaymentOrderUseCaseIF creates a new instance of CreatePaymentOrderUseCaseIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCreatePaymentOrderUseCaseIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *CreatePaymentOrderUseCaseIF {
	mock := &CreatePaymentOrderUseCaseIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
