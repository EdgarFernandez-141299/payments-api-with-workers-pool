// Code generated by mockery. DO NOT EDIT.

package repositories

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entities "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/domain/entities"
)

// PaymentConceptRepositoryIF is an autogenerated mock type for the PaymentConceptRepositoryIF type
type PaymentConceptRepositoryIF struct {
	mock.Mock
}

type PaymentConceptRepositoryIF_Expecter struct {
	mock *mock.Mock
}

func (_m *PaymentConceptRepositoryIF) EXPECT() *PaymentConceptRepositoryIF_Expecter {
	return &PaymentConceptRepositoryIF_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, entity
func (_m *PaymentConceptRepositoryIF) Create(ctx context.Context, entity entities.PaymentConceptEntity) error {
	ret := _m.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.PaymentConceptEntity) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PaymentConceptRepositoryIF_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type PaymentConceptRepositoryIF_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - entity entities.PaymentConceptEntity
func (_e *PaymentConceptRepositoryIF_Expecter) Create(ctx interface{}, entity interface{}) *PaymentConceptRepositoryIF_Create_Call {
	return &PaymentConceptRepositoryIF_Create_Call{Call: _e.mock.On("Create", ctx, entity)}
}

func (_c *PaymentConceptRepositoryIF_Create_Call) Run(run func(ctx context.Context, entity entities.PaymentConceptEntity)) *PaymentConceptRepositoryIF_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.PaymentConceptEntity))
	})
	return _c
}

func (_c *PaymentConceptRepositoryIF_Create_Call) Return(_a0 error) *PaymentConceptRepositoryIF_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PaymentConceptRepositoryIF_Create_Call) RunAndReturn(run func(context.Context, entities.PaymentConceptEntity) error) *PaymentConceptRepositoryIF_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindByCode provides a mock function with given fields: ctx, code, enterpriseId
func (_m *PaymentConceptRepositoryIF) FindByCode(ctx context.Context, code string, enterpriseId string) (entities.PaymentConceptEntity, error) {
	ret := _m.Called(ctx, code, enterpriseId)

	if len(ret) == 0 {
		panic("no return value specified for FindByCode")
	}

	var r0 entities.PaymentConceptEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (entities.PaymentConceptEntity, error)); ok {
		return rf(ctx, code, enterpriseId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entities.PaymentConceptEntity); ok {
		r0 = rf(ctx, code, enterpriseId)
	} else {
		r0 = ret.Get(0).(entities.PaymentConceptEntity)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, code, enterpriseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentConceptRepositoryIF_FindByCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByCode'
type PaymentConceptRepositoryIF_FindByCode_Call struct {
	*mock.Call
}

// FindByCode is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
//   - enterpriseId string
func (_e *PaymentConceptRepositoryIF_Expecter) FindByCode(ctx interface{}, code interface{}, enterpriseId interface{}) *PaymentConceptRepositoryIF_FindByCode_Call {
	return &PaymentConceptRepositoryIF_FindByCode_Call{Call: _e.mock.On("FindByCode", ctx, code, enterpriseId)}
}

func (_c *PaymentConceptRepositoryIF_FindByCode_Call) Run(run func(ctx context.Context, code string, enterpriseId string)) *PaymentConceptRepositoryIF_FindByCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *PaymentConceptRepositoryIF_FindByCode_Call) Return(_a0 entities.PaymentConceptEntity, _a1 error) *PaymentConceptRepositoryIF_FindByCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PaymentConceptRepositoryIF_FindByCode_Call) RunAndReturn(run func(context.Context, string, string) (entities.PaymentConceptEntity, error)) *PaymentConceptRepositoryIF_FindByCode_Call {
	_c.Call.Return(run)
	return _c
}

// NewPaymentConceptRepositoryIF creates a new instance of PaymentConceptRepositoryIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentConceptRepositoryIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentConceptRepositoryIF {
	mock := &PaymentConceptRepositoryIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
