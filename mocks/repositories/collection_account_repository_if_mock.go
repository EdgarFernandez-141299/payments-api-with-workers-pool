// Code generated by mockery. DO NOT EDIT.

package repositories

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entities "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/infra/repositories/collection_account/entities"
)

// CollectionAccountRepositoryIF is an autogenerated mock type for the CollectionAccountRepositoryIF type
type CollectionAccountRepositoryIF struct {
	mock.Mock
}

type CollectionAccountRepositoryIF_Expecter struct {
	mock *mock.Mock
}

func (_m *CollectionAccountRepositoryIF) EXPECT() *CollectionAccountRepositoryIF_Expecter {
	return &CollectionAccountRepositoryIF_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, entity
func (_m *CollectionAccountRepositoryIF) Create(ctx context.Context, entity entities.CollectionAccountEntity) error {
	ret := _m.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.CollectionAccountEntity) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CollectionAccountRepositoryIF_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type CollectionAccountRepositoryIF_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - entity entities.CollectionAccountEntity
func (_e *CollectionAccountRepositoryIF_Expecter) Create(ctx interface{}, entity interface{}) *CollectionAccountRepositoryIF_Create_Call {
	return &CollectionAccountRepositoryIF_Create_Call{Call: _e.mock.On("Create", ctx, entity)}
}

func (_c *CollectionAccountRepositoryIF_Create_Call) Run(run func(ctx context.Context, entity entities.CollectionAccountEntity)) *CollectionAccountRepositoryIF_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.CollectionAccountEntity))
	})
	return _c
}

func (_c *CollectionAccountRepositoryIF_Create_Call) Return(_a0 error) *CollectionAccountRepositoryIF_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionAccountRepositoryIF_Create_Call) RunAndReturn(run func(context.Context, entities.CollectionAccountEntity) error) *CollectionAccountRepositoryIF_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindByAccountNumber provides a mock function with given fields: ctx, accountNumber, enterpriseId
func (_m *CollectionAccountRepositoryIF) FindByAccountNumber(ctx context.Context, accountNumber string, enterpriseId string) (entities.CollectionAccountEntity, error) {
	ret := _m.Called(ctx, accountNumber, enterpriseId)

	if len(ret) == 0 {
		panic("no return value specified for FindByAccountNumber")
	}

	var r0 entities.CollectionAccountEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (entities.CollectionAccountEntity, error)); ok {
		return rf(ctx, accountNumber, enterpriseId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entities.CollectionAccountEntity); ok {
		r0 = rf(ctx, accountNumber, enterpriseId)
	} else {
		r0 = ret.Get(0).(entities.CollectionAccountEntity)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, accountNumber, enterpriseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CollectionAccountRepositoryIF_FindByAccountNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByAccountNumber'
type CollectionAccountRepositoryIF_FindByAccountNumber_Call struct {
	*mock.Call
}

// FindByAccountNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - accountNumber string
//   - enterpriseId string
func (_e *CollectionAccountRepositoryIF_Expecter) FindByAccountNumber(ctx interface{}, accountNumber interface{}, enterpriseId interface{}) *CollectionAccountRepositoryIF_FindByAccountNumber_Call {
	return &CollectionAccountRepositoryIF_FindByAccountNumber_Call{Call: _e.mock.On("FindByAccountNumber", ctx, accountNumber, enterpriseId)}
}

func (_c *CollectionAccountRepositoryIF_FindByAccountNumber_Call) Run(run func(ctx context.Context, accountNumber string, enterpriseId string)) *CollectionAccountRepositoryIF_FindByAccountNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CollectionAccountRepositoryIF_FindByAccountNumber_Call) Return(_a0 entities.CollectionAccountEntity, _a1 error) *CollectionAccountRepositoryIF_FindByAccountNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CollectionAccountRepositoryIF_FindByAccountNumber_Call) RunAndReturn(run func(context.Context, string, string) (entities.CollectionAccountEntity, error)) *CollectionAccountRepositoryIF_FindByAccountNumber_Call {
	_c.Call.Return(run)
	return _c
}

// FindById provides a mock function with given fields: ctx, id, enterpriseId
func (_m *CollectionAccountRepositoryIF) FindById(ctx context.Context, id string, enterpriseId string) (entities.CollectionAccountEntity, error) {
	ret := _m.Called(ctx, id, enterpriseId)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 entities.CollectionAccountEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (entities.CollectionAccountEntity, error)); ok {
		return rf(ctx, id, enterpriseId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entities.CollectionAccountEntity); ok {
		r0 = rf(ctx, id, enterpriseId)
	} else {
		r0 = ret.Get(0).(entities.CollectionAccountEntity)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, enterpriseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CollectionAccountRepositoryIF_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type CollectionAccountRepositoryIF_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - enterpriseId string
func (_e *CollectionAccountRepositoryIF_Expecter) FindById(ctx interface{}, id interface{}, enterpriseId interface{}) *CollectionAccountRepositoryIF_FindById_Call {
	return &CollectionAccountRepositoryIF_FindById_Call{Call: _e.mock.On("FindById", ctx, id, enterpriseId)}
}

func (_c *CollectionAccountRepositoryIF_FindById_Call) Run(run func(ctx context.Context, id string, enterpriseId string)) *CollectionAccountRepositoryIF_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CollectionAccountRepositoryIF_FindById_Call) Return(_a0 entities.CollectionAccountEntity, _a1 error) *CollectionAccountRepositoryIF_FindById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CollectionAccountRepositoryIF_FindById_Call) RunAndReturn(run func(context.Context, string, string) (entities.CollectionAccountEntity, error)) *CollectionAccountRepositoryIF_FindById_Call {
	_c.Call.Return(run)
	return _c
}

// NewCollectionAccountRepositoryIF creates a new instance of CollectionAccountRepositoryIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCollectionAccountRepositoryIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *CollectionAccountRepositoryIF {
	mock := &CollectionAccountRepositoryIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
