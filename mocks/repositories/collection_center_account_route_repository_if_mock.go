// Code generated by mockery. DO NOT EDIT.

package repositories

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entities "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/domain/entities"
)

// CollectionCenterAccountRouteRepositoryIF is an autogenerated mock type for the CollectionCenterAccountRouteRepositoryIF type
type CollectionCenterAccountRouteRepositoryIF struct {
	mock.Mock
}

type CollectionCenterAccountRouteRepositoryIF_Expecter struct {
	mock *mock.Mock
}

func (_m *CollectionCenterAccountRouteRepositoryIF) EXPECT() *CollectionCenterAccountRouteRepositoryIF_Expecter {
	return &CollectionCenterAccountRouteRepositoryIF_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, collectionRoute
func (_m *CollectionCenterAccountRouteRepositoryIF) Create(ctx context.Context, collectionRoute entities.CollectionAccountRouteEntity) error {
	ret := _m.Called(ctx, collectionRoute)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.CollectionAccountRouteEntity) error); ok {
		r0 = rf(ctx, collectionRoute)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CollectionCenterAccountRouteRepositoryIF_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type CollectionCenterAccountRouteRepositoryIF_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionRoute entities.CollectionAccountRouteEntity
func (_e *CollectionCenterAccountRouteRepositoryIF_Expecter) Create(ctx interface{}, collectionRoute interface{}) *CollectionCenterAccountRouteRepositoryIF_Create_Call {
	return &CollectionCenterAccountRouteRepositoryIF_Create_Call{Call: _e.mock.On("Create", ctx, collectionRoute)}
}

func (_c *CollectionCenterAccountRouteRepositoryIF_Create_Call) Run(run func(ctx context.Context, collectionRoute entities.CollectionAccountRouteEntity)) *CollectionCenterAccountRouteRepositoryIF_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.CollectionAccountRouteEntity))
	})
	return _c
}

func (_c *CollectionCenterAccountRouteRepositoryIF_Create_Call) Return(_a0 error) *CollectionCenterAccountRouteRepositoryIF_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionCenterAccountRouteRepositoryIF_Create_Call) RunAndReturn(run func(context.Context, entities.CollectionAccountRouteEntity) error) *CollectionCenterAccountRouteRepositoryIF_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Disable provides a mock function with given fields: ctx, id, enterpriseId
func (_m *CollectionCenterAccountRouteRepositoryIF) Disable(ctx context.Context, id string, enterpriseId string) error {
	ret := _m.Called(ctx, id, enterpriseId)

	if len(ret) == 0 {
		panic("no return value specified for Disable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, enterpriseId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CollectionCenterAccountRouteRepositoryIF_Disable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disable'
type CollectionCenterAccountRouteRepositoryIF_Disable_Call struct {
	*mock.Call
}

// Disable is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - enterpriseId string
func (_e *CollectionCenterAccountRouteRepositoryIF_Expecter) Disable(ctx interface{}, id interface{}, enterpriseId interface{}) *CollectionCenterAccountRouteRepositoryIF_Disable_Call {
	return &CollectionCenterAccountRouteRepositoryIF_Disable_Call{Call: _e.mock.On("Disable", ctx, id, enterpriseId)}
}

func (_c *CollectionCenterAccountRouteRepositoryIF_Disable_Call) Run(run func(ctx context.Context, id string, enterpriseId string)) *CollectionCenterAccountRouteRepositoryIF_Disable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CollectionCenterAccountRouteRepositoryIF_Disable_Call) Return(_a0 error) *CollectionCenterAccountRouteRepositoryIF_Disable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectionCenterAccountRouteRepositoryIF_Disable_Call) RunAndReturn(run func(context.Context, string, string) error) *CollectionCenterAccountRouteRepositoryIF_Disable_Call {
	_c.Call.Return(run)
	return _c
}

// FindRouteBy provides a mock function with given fields: ctx, countryCode, currencyCode, associatedOrigin, enterpriseID
func (_m *CollectionCenterAccountRouteRepositoryIF) FindRouteBy(ctx context.Context, countryCode string, currencyCode string, associatedOrigin string, enterpriseID string) (entities.CollectionAccountRouteEntity, error) {
	ret := _m.Called(ctx, countryCode, currencyCode, associatedOrigin, enterpriseID)

	if len(ret) == 0 {
		panic("no return value specified for FindRouteBy")
	}

	var r0 entities.CollectionAccountRouteEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (entities.CollectionAccountRouteEntity, error)); ok {
		return rf(ctx, countryCode, currencyCode, associatedOrigin, enterpriseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) entities.CollectionAccountRouteEntity); ok {
		r0 = rf(ctx, countryCode, currencyCode, associatedOrigin, enterpriseID)
	} else {
		r0 = ret.Get(0).(entities.CollectionAccountRouteEntity)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, countryCode, currencyCode, associatedOrigin, enterpriseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CollectionCenterAccountRouteRepositoryIF_FindRouteBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindRouteBy'
type CollectionCenterAccountRouteRepositoryIF_FindRouteBy_Call struct {
	*mock.Call
}

// FindRouteBy is a helper method to define mock.On call
//   - ctx context.Context
//   - countryCode string
//   - currencyCode string
//   - associatedOrigin string
//   - enterpriseID string
func (_e *CollectionCenterAccountRouteRepositoryIF_Expecter) FindRouteBy(ctx interface{}, countryCode interface{}, currencyCode interface{}, associatedOrigin interface{}, enterpriseID interface{}) *CollectionCenterAccountRouteRepositoryIF_FindRouteBy_Call {
	return &CollectionCenterAccountRouteRepositoryIF_FindRouteBy_Call{Call: _e.mock.On("FindRouteBy", ctx, countryCode, currencyCode, associatedOrigin, enterpriseID)}
}

func (_c *CollectionCenterAccountRouteRepositoryIF_FindRouteBy_Call) Run(run func(ctx context.Context, countryCode string, currencyCode string, associatedOrigin string, enterpriseID string)) *CollectionCenterAccountRouteRepositoryIF_FindRouteBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *CollectionCenterAccountRouteRepositoryIF_FindRouteBy_Call) Return(_a0 entities.CollectionAccountRouteEntity, _a1 error) *CollectionCenterAccountRouteRepositoryIF_FindRouteBy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CollectionCenterAccountRouteRepositoryIF_FindRouteBy_Call) RunAndReturn(run func(context.Context, string, string, string, string) (entities.CollectionAccountRouteEntity, error)) *CollectionCenterAccountRouteRepositoryIF_FindRouteBy_Call {
	_c.Call.Return(run)
	return _c
}

// NewCollectionCenterAccountRouteRepositoryIF creates a new instance of CollectionCenterAccountRouteRepositoryIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCollectionCenterAccountRouteRepositoryIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *CollectionCenterAccountRouteRepositoryIF {
	mock := &CollectionCenterAccountRouteRepositoryIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
