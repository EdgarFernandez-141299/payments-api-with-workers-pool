// Code generated by mockery. DO NOT EDIT.

package use_cases

import (
	context "context"

	command "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/domain/order/command"

	mock "github.com/stretchr/testify/mock"

	response "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/infra/api/handler/order/dto/response"
)

// RefundTotalUseCaseIF is an autogenerated mock type for the RefundTotalUseCaseIF type
type RefundTotalUseCaseIF struct {
	mock.Mock
}

type RefundTotalUseCaseIF_Expecter struct {
	mock *mock.Mock
}

func (_m *RefundTotalUseCaseIF) EXPECT() *RefundTotalUseCaseIF_Expecter {
	return &RefundTotalUseCaseIF_Expecter{mock: &_m.Mock}
}

// Refund provides a mock function with given fields: ctx, refund, enterpriseID
func (_m *RefundTotalUseCaseIF) Refund(ctx context.Context, refund command.RefundTotalCommand, enterpriseID string) (response.RefundResponseDTO, error) {
	ret := _m.Called(ctx, refund, enterpriseID)

	if len(ret) == 0 {
		panic("no return value specified for Refund")
	}

	var r0 response.RefundResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, command.RefundTotalCommand, string) (response.RefundResponseDTO, error)); ok {
		return rf(ctx, refund, enterpriseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, command.RefundTotalCommand, string) response.RefundResponseDTO); ok {
		r0 = rf(ctx, refund, enterpriseID)
	} else {
		r0 = ret.Get(0).(response.RefundResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, command.RefundTotalCommand, string) error); ok {
		r1 = rf(ctx, refund, enterpriseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefundTotalUseCaseIF_Refund_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refund'
type RefundTotalUseCaseIF_Refund_Call struct {
	*mock.Call
}

// Refund is a helper method to define mock.On call
//   - ctx context.Context
//   - refund command.RefundTotalCommand
//   - enterpriseID string
func (_e *RefundTotalUseCaseIF_Expecter) Refund(ctx interface{}, refund interface{}, enterpriseID interface{}) *RefundTotalUseCaseIF_Refund_Call {
	return &RefundTotalUseCaseIF_Refund_Call{Call: _e.mock.On("Refund", ctx, refund, enterpriseID)}
}

func (_c *RefundTotalUseCaseIF_Refund_Call) Run(run func(ctx context.Context, refund command.RefundTotalCommand, enterpriseID string)) *RefundTotalUseCaseIF_Refund_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(command.RefundTotalCommand), args[2].(string))
	})
	return _c
}

func (_c *RefundTotalUseCaseIF_Refund_Call) Return(_a0 response.RefundResponseDTO, _a1 error) *RefundTotalUseCaseIF_Refund_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RefundTotalUseCaseIF_Refund_Call) RunAndReturn(run func(context.Context, command.RefundTotalCommand, string) (response.RefundResponseDTO, error)) *RefundTotalUseCaseIF_Refund_Call {
	_c.Call.Return(run)
	return _c
}

// NewRefundTotalUseCaseIF creates a new instance of RefundTotalUseCaseIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRefundTotalUseCaseIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *RefundTotalUseCaseIF {
	mock := &RefundTotalUseCaseIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
