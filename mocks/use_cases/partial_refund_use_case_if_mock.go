// Code generated by mockery. DO NOT EDIT.

package use_cases

import (
	context "context"

	command "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/domain/order/command"

	mock "github.com/stretchr/testify/mock"

	response "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/infra/api/handler/order/dto/response"
)

// PartialRefundUseCaseIF is an autogenerated mock type for the PartialRefundUseCaseIF type
type PartialRefundUseCaseIF struct {
	mock.Mock
}

type PartialRefundUseCaseIF_Expecter struct {
	mock *mock.Mock
}

func (_m *PartialRefundUseCaseIF) EXPECT() *PartialRefundUseCaseIF_Expecter {
	return &PartialRefundUseCaseIF_Expecter{mock: &_m.Mock}
}

// PartialRefund provides a mock function with given fields: ctx, refund, enterpriseID
func (_m *PartialRefundUseCaseIF) PartialRefund(ctx context.Context, refund command.CreatePartialPaymentRefundCommand, enterpriseID string) (response.RefundResponseDTO, error) {
	ret := _m.Called(ctx, refund, enterpriseID)

	if len(ret) == 0 {
		panic("no return value specified for PartialRefund")
	}

	var r0 response.RefundResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, command.CreatePartialPaymentRefundCommand, string) (response.RefundResponseDTO, error)); ok {
		return rf(ctx, refund, enterpriseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, command.CreatePartialPaymentRefundCommand, string) response.RefundResponseDTO); ok {
		r0 = rf(ctx, refund, enterpriseID)
	} else {
		r0 = ret.Get(0).(response.RefundResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, command.CreatePartialPaymentRefundCommand, string) error); ok {
		r1 = rf(ctx, refund, enterpriseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PartialRefundUseCaseIF_PartialRefund_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PartialRefund'
type PartialRefundUseCaseIF_PartialRefund_Call struct {
	*mock.Call
}

// PartialRefund is a helper method to define mock.On call
//   - ctx context.Context
//   - refund command.CreatePartialPaymentRefundCommand
//   - enterpriseID string
func (_e *PartialRefundUseCaseIF_Expecter) PartialRefund(ctx interface{}, refund interface{}, enterpriseID interface{}) *PartialRefundUseCaseIF_PartialRefund_Call {
	return &PartialRefundUseCaseIF_PartialRefund_Call{Call: _e.mock.On("PartialRefund", ctx, refund, enterpriseID)}
}

func (_c *PartialRefundUseCaseIF_PartialRefund_Call) Run(run func(ctx context.Context, refund command.CreatePartialPaymentRefundCommand, enterpriseID string)) *PartialRefundUseCaseIF_PartialRefund_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(command.CreatePartialPaymentRefundCommand), args[2].(string))
	})
	return _c
}

func (_c *PartialRefundUseCaseIF_PartialRefund_Call) Return(_a0 response.RefundResponseDTO, _a1 error) *PartialRefundUseCaseIF_PartialRefund_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PartialRefundUseCaseIF_PartialRefund_Call) RunAndReturn(run func(context.Context, command.CreatePartialPaymentRefundCommand, string) (response.RefundResponseDTO, error)) *PartialRefundUseCaseIF_PartialRefund_Call {
	_c.Call.Return(run)
	return _c
}

// NewPartialRefundUseCaseIF creates a new instance of PartialRefundUseCaseIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPartialRefundUseCaseIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *PartialRefundUseCaseIF {
	mock := &PartialRefundUseCaseIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
