// Code generated by mockery. DO NOT EDIT.

package pdf_generator

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// PDFUtilInterface is an autogenerated mock type for the PDFUtilInterface type
type PDFUtilInterface struct {
	mock.Mock
}

type PDFUtilInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *PDFUtilInterface) EXPECT() *PDFUtilInterface_Expecter {
	return &PDFUtilInterface_Expecter{mock: &_m.Mock}
}

// GeneratePDF provides a mock function with given fields: ctx, htmlPath, data
func (_m *PDFUtilInterface) GeneratePDF(ctx context.Context, htmlPath string, data map[string]string) (io.Reader, error) {
	ret := _m.Called(ctx, htmlPath, data)

	if len(ret) == 0 {
		panic("no return value specified for GeneratePDF")
	}

	var r0 io.Reader
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) (io.Reader, error)); ok {
		return rf(ctx, htmlPath, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) io.Reader); ok {
		r0 = rf(ctx, htmlPath, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string) error); ok {
		r1 = rf(ctx, htmlPath, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PDFUtilInterface_GeneratePDF_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeneratePDF'
type PDFUtilInterface_GeneratePDF_Call struct {
	*mock.Call
}

// GeneratePDF is a helper method to define mock.On call
//   - ctx context.Context
//   - htmlPath string
//   - data map[string]string
func (_e *PDFUtilInterface_Expecter) GeneratePDF(ctx interface{}, htmlPath interface{}, data interface{}) *PDFUtilInterface_GeneratePDF_Call {
	return &PDFUtilInterface_GeneratePDF_Call{Call: _e.mock.On("GeneratePDF", ctx, htmlPath, data)}
}

func (_c *PDFUtilInterface_GeneratePDF_Call) Run(run func(ctx context.Context, htmlPath string, data map[string]string)) *PDFUtilInterface_GeneratePDF_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]string))
	})
	return _c
}

func (_c *PDFUtilInterface_GeneratePDF_Call) Return(_a0 io.Reader, _a1 error) *PDFUtilInterface_GeneratePDF_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PDFUtilInterface_GeneratePDF_Call) RunAndReturn(run func(context.Context, string, map[string]string) (io.Reader, error)) *PDFUtilInterface_GeneratePDF_Call {
	_c.Call.Return(run)
	return _c
}

// NewPDFUtilInterface creates a new instance of PDFUtilInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPDFUtilInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PDFUtilInterface {
	mock := &PDFUtilInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
