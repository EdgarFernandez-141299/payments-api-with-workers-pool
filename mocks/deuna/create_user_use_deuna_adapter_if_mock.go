// Code generated by mockery. DO NOT EDIT.

package deuna

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	request "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/infra/api/handler/user/dto/request"

	response "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/infra/api/handler/user/dto/response"
)

// CreateUserUseDeunaAdapterIF is an autogenerated mock type for the CreateUserUseDeunaAdapterIF type
type CreateUserUseDeunaAdapterIF struct {
	mock.Mock
}

type CreateUserUseDeunaAdapterIF_Expecter struct {
	mock *mock.Mock
}

func (_m *CreateUserUseDeunaAdapterIF) EXPECT() *CreateUserUseDeunaAdapterIF_Expecter {
	return &CreateUserUseDeunaAdapterIF_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, _a1, enterpriseId
func (_m *CreateUserUseDeunaAdapterIF) Create(ctx context.Context, _a1 request.CreateUserRequest, enterpriseId string) (response.CreatedUserResponse, error) {
	ret := _m.Called(ctx, _a1, enterpriseId)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 response.CreatedUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.CreateUserRequest, string) (response.CreatedUserResponse, error)); ok {
		return rf(ctx, _a1, enterpriseId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.CreateUserRequest, string) response.CreatedUserResponse); ok {
		r0 = rf(ctx, _a1, enterpriseId)
	} else {
		r0 = ret.Get(0).(response.CreatedUserResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.CreateUserRequest, string) error); ok {
		r1 = rf(ctx, _a1, enterpriseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserUseDeunaAdapterIF_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type CreateUserUseDeunaAdapterIF_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 request.CreateUserRequest
//   - enterpriseId string
func (_e *CreateUserUseDeunaAdapterIF_Expecter) Create(ctx interface{}, _a1 interface{}, enterpriseId interface{}) *CreateUserUseDeunaAdapterIF_Create_Call {
	return &CreateUserUseDeunaAdapterIF_Create_Call{Call: _e.mock.On("Create", ctx, _a1, enterpriseId)}
}

func (_c *CreateUserUseDeunaAdapterIF_Create_Call) Run(run func(ctx context.Context, _a1 request.CreateUserRequest, enterpriseId string)) *CreateUserUseDeunaAdapterIF_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(request.CreateUserRequest), args[2].(string))
	})
	return _c
}

func (_c *CreateUserUseDeunaAdapterIF_Create_Call) Return(_a0 response.CreatedUserResponse, _a1 error) *CreateUserUseDeunaAdapterIF_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CreateUserUseDeunaAdapterIF_Create_Call) RunAndReturn(run func(context.Context, request.CreateUserRequest, string) (response.CreatedUserResponse, error)) *CreateUserUseDeunaAdapterIF_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreateUser provides a mock function with given fields: ctx, userID, userType, enterpriseID
func (_m *CreateUserUseDeunaAdapterIF) GetOrCreateUser(ctx context.Context, userID string, userType string, enterpriseID string) (response.CreatedUserResponse, error) {
	ret := _m.Called(ctx, userID, userType, enterpriseID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateUser")
	}

	var r0 response.CreatedUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (response.CreatedUserResponse, error)); ok {
		return rf(ctx, userID, userType, enterpriseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) response.CreatedUserResponse); ok {
		r0 = rf(ctx, userID, userType, enterpriseID)
	} else {
		r0 = ret.Get(0).(response.CreatedUserResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, userID, userType, enterpriseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserUseDeunaAdapterIF_GetOrCreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreateUser'
type CreateUserUseDeunaAdapterIF_GetOrCreateUser_Call struct {
	*mock.Call
}

// GetOrCreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - userType string
//   - enterpriseID string
func (_e *CreateUserUseDeunaAdapterIF_Expecter) GetOrCreateUser(ctx interface{}, userID interface{}, userType interface{}, enterpriseID interface{}) *CreateUserUseDeunaAdapterIF_GetOrCreateUser_Call {
	return &CreateUserUseDeunaAdapterIF_GetOrCreateUser_Call{Call: _e.mock.On("GetOrCreateUser", ctx, userID, userType, enterpriseID)}
}

func (_c *CreateUserUseDeunaAdapterIF_GetOrCreateUser_Call) Run(run func(ctx context.Context, userID string, userType string, enterpriseID string)) *CreateUserUseDeunaAdapterIF_GetOrCreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *CreateUserUseDeunaAdapterIF_GetOrCreateUser_Call) Return(_a0 response.CreatedUserResponse, _a1 error) *CreateUserUseDeunaAdapterIF_GetOrCreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CreateUserUseDeunaAdapterIF_GetOrCreateUser_Call) RunAndReturn(run func(context.Context, string, string, string) (response.CreatedUserResponse, error)) *CreateUserUseDeunaAdapterIF_GetOrCreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx, memberId, enterpriseId
func (_m *CreateUserUseDeunaAdapterIF) GetUser(ctx context.Context, memberId string, enterpriseId string) (response.CreatedUserResponse, error) {
	ret := _m.Called(ctx, memberId, enterpriseId)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 response.CreatedUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (response.CreatedUserResponse, error)); ok {
		return rf(ctx, memberId, enterpriseId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) response.CreatedUserResponse); ok {
		r0 = rf(ctx, memberId, enterpriseId)
	} else {
		r0 = ret.Get(0).(response.CreatedUserResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, memberId, enterpriseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserUseDeunaAdapterIF_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type CreateUserUseDeunaAdapterIF_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - memberId string
//   - enterpriseId string
func (_e *CreateUserUseDeunaAdapterIF_Expecter) GetUser(ctx interface{}, memberId interface{}, enterpriseId interface{}) *CreateUserUseDeunaAdapterIF_GetUser_Call {
	return &CreateUserUseDeunaAdapterIF_GetUser_Call{Call: _e.mock.On("GetUser", ctx, memberId, enterpriseId)}
}

func (_c *CreateUserUseDeunaAdapterIF_GetUser_Call) Run(run func(ctx context.Context, memberId string, enterpriseId string)) *CreateUserUseDeunaAdapterIF_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CreateUserUseDeunaAdapterIF_GetUser_Call) Return(_a0 response.CreatedUserResponse, _a1 error) *CreateUserUseDeunaAdapterIF_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CreateUserUseDeunaAdapterIF_GetUser_Call) RunAndReturn(run func(context.Context, string, string) (response.CreatedUserResponse, error)) *CreateUserUseDeunaAdapterIF_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateUser provides a mock function with given fields: ctx, _a1, enterpriseId
func (_m *CreateUserUseDeunaAdapterIF) ValidateUser(ctx context.Context, _a1 request.CreateUserRequest, enterpriseId string) (response.UserValidatedResponse, error) {
	ret := _m.Called(ctx, _a1, enterpriseId)

	if len(ret) == 0 {
		panic("no return value specified for ValidateUser")
	}

	var r0 response.UserValidatedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.CreateUserRequest, string) (response.UserValidatedResponse, error)); ok {
		return rf(ctx, _a1, enterpriseId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.CreateUserRequest, string) response.UserValidatedResponse); ok {
		r0 = rf(ctx, _a1, enterpriseId)
	} else {
		r0 = ret.Get(0).(response.UserValidatedResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.CreateUserRequest, string) error); ok {
		r1 = rf(ctx, _a1, enterpriseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserUseDeunaAdapterIF_ValidateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateUser'
type CreateUserUseDeunaAdapterIF_ValidateUser_Call struct {
	*mock.Call
}

// ValidateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 request.CreateUserRequest
//   - enterpriseId string
func (_e *CreateUserUseDeunaAdapterIF_Expecter) ValidateUser(ctx interface{}, _a1 interface{}, enterpriseId interface{}) *CreateUserUseDeunaAdapterIF_ValidateUser_Call {
	return &CreateUserUseDeunaAdapterIF_ValidateUser_Call{Call: _e.mock.On("ValidateUser", ctx, _a1, enterpriseId)}
}

func (_c *CreateUserUseDeunaAdapterIF_ValidateUser_Call) Run(run func(ctx context.Context, _a1 request.CreateUserRequest, enterpriseId string)) *CreateUserUseDeunaAdapterIF_ValidateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(request.CreateUserRequest), args[2].(string))
	})
	return _c
}

func (_c *CreateUserUseDeunaAdapterIF_ValidateUser_Call) Return(_a0 response.UserValidatedResponse, _a1 error) *CreateUserUseDeunaAdapterIF_ValidateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CreateUserUseDeunaAdapterIF_ValidateUser_Call) RunAndReturn(run func(context.Context, request.CreateUserRequest, string) (response.UserValidatedResponse, error)) *CreateUserUseDeunaAdapterIF_ValidateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewCreateUserUseDeunaAdapterIF creates a new instance of CreateUserUseDeunaAdapterIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCreateUserUseDeunaAdapterIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *CreateUserUseDeunaAdapterIF {
	mock := &CreateUserUseDeunaAdapterIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
