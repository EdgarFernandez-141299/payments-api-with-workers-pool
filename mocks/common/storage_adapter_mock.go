// Code generated by mockery. DO NOT EDIT.

package common

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// StorageAdapter is an autogenerated mock type for the StorageAdapter type
type StorageAdapter struct {
	mock.Mock
}

type StorageAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *StorageAdapter) EXPECT() *StorageAdapter_Expecter {
	return &StorageAdapter_Expecter{mock: &_m.Mock}
}

// Store provides a mock function with given fields: ctx, path, file
func (_m *StorageAdapter) Store(ctx context.Context, path string, file io.Reader) (string, error) {
	ret := _m.Called(ctx, path, file)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader) string); ok {
		r0 = rf(ctx, path, file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader) error); ok {
		r1 = rf(ctx, path, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorageAdapter_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type StorageAdapter_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - file io.Reader
func (_e *StorageAdapter_Expecter) Store(ctx interface{}, path interface{}, file interface{}) *StorageAdapter_Store_Call {
	return &StorageAdapter_Store_Call{Call: _e.mock.On("Store", ctx, path, file)}
}

func (_c *StorageAdapter_Store_Call) Run(run func(ctx context.Context, path string, file io.Reader)) *StorageAdapter_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader))
	})
	return _c
}

func (_c *StorageAdapter_Store_Call) Return(_a0 string, _a1 error) *StorageAdapter_Store_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StorageAdapter_Store_Call) RunAndReturn(run func(context.Context, string, io.Reader) (string, error)) *StorageAdapter_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorageAdapter creates a new instance of StorageAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorageAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageAdapter {
	mock := &StorageAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
