// Code generated by mockery. DO NOT EDIT.

package adapters

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	response "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/infra/api/handler/order/dto/response"
)

// RefundAdapterIF is an autogenerated mock type for the RefundAdapterIF type
type RefundAdapterIF struct {
	mock.Mock
}

type RefundAdapterIF_Expecter struct {
	mock *mock.Mock
}

func (_m *RefundAdapterIF) EXPECT() *RefundAdapterIF_Expecter {
	return &RefundAdapterIF_Expecter{mock: &_m.Mock}
}

// RefundPayment provides a mock function with given fields: ctx, paymentID, orderID, enterpriseID, reason
func (_m *RefundAdapterIF) RefundPayment(ctx context.Context, paymentID string, orderID string, enterpriseID string, reason string) (response.RefundResponseDTO, error) {
	ret := _m.Called(ctx, paymentID, orderID, enterpriseID, reason)

	if len(ret) == 0 {
		panic("no return value specified for RefundPayment")
	}

	var r0 response.RefundResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (response.RefundResponseDTO, error)); ok {
		return rf(ctx, paymentID, orderID, enterpriseID, reason)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) response.RefundResponseDTO); ok {
		r0 = rf(ctx, paymentID, orderID, enterpriseID, reason)
	} else {
		r0 = ret.Get(0).(response.RefundResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, paymentID, orderID, enterpriseID, reason)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefundAdapterIF_RefundPayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefundPayment'
type RefundAdapterIF_RefundPayment_Call struct {
	*mock.Call
}

// RefundPayment is a helper method to define mock.On call
//   - ctx context.Context
//   - paymentID string
//   - orderID string
//   - enterpriseID string
//   - reason string
func (_e *RefundAdapterIF_Expecter) RefundPayment(ctx interface{}, paymentID interface{}, orderID interface{}, enterpriseID interface{}, reason interface{}) *RefundAdapterIF_RefundPayment_Call {
	return &RefundAdapterIF_RefundPayment_Call{Call: _e.mock.On("RefundPayment", ctx, paymentID, orderID, enterpriseID, reason)}
}

func (_c *RefundAdapterIF_RefundPayment_Call) Run(run func(ctx context.Context, paymentID string, orderID string, enterpriseID string, reason string)) *RefundAdapterIF_RefundPayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *RefundAdapterIF_RefundPayment_Call) Return(_a0 response.RefundResponseDTO, _a1 error) *RefundAdapterIF_RefundPayment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RefundAdapterIF_RefundPayment_Call) RunAndReturn(run func(context.Context, string, string, string, string) (response.RefundResponseDTO, error)) *RefundAdapterIF_RefundPayment_Call {
	_c.Call.Return(run)
	return _c
}

// NewRefundAdapterIF creates a new instance of RefundAdapterIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRefundAdapterIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *RefundAdapterIF {
	mock := &RefundAdapterIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
