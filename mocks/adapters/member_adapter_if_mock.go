// Code generated by mockery. DO NOT EDIT.

package adapters

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	response "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/application/user/adapters/resources/dto/response"
)

// MemberAdapterIF is an autogenerated mock type for the MemberAdapterIF type
type MemberAdapterIF struct {
	mock.Mock
}

type MemberAdapterIF_Expecter struct {
	mock *mock.Mock
}

func (_m *MemberAdapterIF) EXPECT() *MemberAdapterIF_Expecter {
	return &MemberAdapterIF_Expecter{mock: &_m.Mock}
}

// GetUserProfileInfo provides a mock function with given fields: oldCtx, userId, enterpriseId
func (_m *MemberAdapterIF) GetUserProfileInfo(oldCtx context.Context, userId string, enterpriseId string) (*response.UserProfileInfoDTO, error) {
	ret := _m.Called(oldCtx, userId, enterpriseId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserProfileInfo")
	}

	var r0 *response.UserProfileInfoDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*response.UserProfileInfoDTO, error)); ok {
		return rf(oldCtx, userId, enterpriseId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *response.UserProfileInfoDTO); ok {
		r0 = rf(oldCtx, userId, enterpriseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.UserProfileInfoDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(oldCtx, userId, enterpriseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MemberAdapterIF_GetUserProfileInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserProfileInfo'
type MemberAdapterIF_GetUserProfileInfo_Call struct {
	*mock.Call
}

// GetUserProfileInfo is a helper method to define mock.On call
//   - oldCtx context.Context
//   - userId string
//   - enterpriseId string
func (_e *MemberAdapterIF_Expecter) GetUserProfileInfo(oldCtx interface{}, userId interface{}, enterpriseId interface{}) *MemberAdapterIF_GetUserProfileInfo_Call {
	return &MemberAdapterIF_GetUserProfileInfo_Call{Call: _e.mock.On("GetUserProfileInfo", oldCtx, userId, enterpriseId)}
}

func (_c *MemberAdapterIF_GetUserProfileInfo_Call) Run(run func(oldCtx context.Context, userId string, enterpriseId string)) *MemberAdapterIF_GetUserProfileInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MemberAdapterIF_GetUserProfileInfo_Call) Return(_a0 *response.UserProfileInfoDTO, _a1 error) *MemberAdapterIF_GetUserProfileInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MemberAdapterIF_GetUserProfileInfo_Call) RunAndReturn(run func(context.Context, string, string) (*response.UserProfileInfoDTO, error)) *MemberAdapterIF_GetUserProfileInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMemberAdapterIF creates a new instance of MemberAdapterIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMemberAdapterIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *MemberAdapterIF {
	mock := &MemberAdapterIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
