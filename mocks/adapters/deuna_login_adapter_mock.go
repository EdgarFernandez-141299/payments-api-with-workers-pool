// Code generated by mockery. DO NOT EDIT.

package adapters

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// DeunaLoginAdapter is an autogenerated mock type for the DeunaLoginAdapter type
type DeunaLoginAdapter struct {
	mock.Mock
}

type DeunaLoginAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *DeunaLoginAdapter) EXPECT() *DeunaLoginAdapter_Expecter {
	return &DeunaLoginAdapter_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, userId
func (_m *DeunaLoginAdapter) Login(ctx context.Context, userId string) (string, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeunaLoginAdapter_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type DeunaLoginAdapter_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
func (_e *DeunaLoginAdapter_Expecter) Login(ctx interface{}, userId interface{}) *DeunaLoginAdapter_Login_Call {
	return &DeunaLoginAdapter_Login_Call{Call: _e.mock.On("Login", ctx, userId)}
}

func (_c *DeunaLoginAdapter_Login_Call) Run(run func(ctx context.Context, userId string)) *DeunaLoginAdapter_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DeunaLoginAdapter_Login_Call) Return(_a0 string, _a1 error) *DeunaLoginAdapter_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeunaLoginAdapter_Login_Call) RunAndReturn(run func(context.Context, string) (string, error)) *DeunaLoginAdapter_Login_Call {
	_c.Call.Return(run)
	return _c
}

// LoginWitUserID provides a mock function with given fields: ctx, userId, enterpriseID
func (_m *DeunaLoginAdapter) LoginWitUserID(ctx context.Context, userId string, enterpriseID string) (string, error) {
	ret := _m.Called(ctx, userId, enterpriseID)

	if len(ret) == 0 {
		panic("no return value specified for LoginWitUserID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, userId, enterpriseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, userId, enterpriseID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userId, enterpriseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeunaLoginAdapter_LoginWitUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginWitUserID'
type DeunaLoginAdapter_LoginWitUserID_Call struct {
	*mock.Call
}

// LoginWitUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - enterpriseID string
func (_e *DeunaLoginAdapter_Expecter) LoginWitUserID(ctx interface{}, userId interface{}, enterpriseID interface{}) *DeunaLoginAdapter_LoginWitUserID_Call {
	return &DeunaLoginAdapter_LoginWitUserID_Call{Call: _e.mock.On("LoginWitUserID", ctx, userId, enterpriseID)}
}

func (_c *DeunaLoginAdapter_LoginWitUserID_Call) Run(run func(ctx context.Context, userId string, enterpriseID string)) *DeunaLoginAdapter_LoginWitUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DeunaLoginAdapter_LoginWitUserID_Call) Return(_a0 string, _a1 error) *DeunaLoginAdapter_LoginWitUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DeunaLoginAdapter_LoginWitUserID_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *DeunaLoginAdapter_LoginWitUserID_Call {
	_c.Call.Return(run)
	return _c
}

// NewDeunaLoginAdapter creates a new instance of DeunaLoginAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeunaLoginAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeunaLoginAdapter {
	mock := &DeunaLoginAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
