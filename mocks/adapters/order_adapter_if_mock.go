// Code generated by mockery. DO NOT EDIT.

package adapters

import (
	context "context"

	decimal "github.com/shopspring/decimal"
	entities "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/domain/entities"
	enums "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/domain/enums"

	mock "github.com/stretchr/testify/mock"

	response "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/application/order/adapters/resources/dto/response"
)

// OrderAdapterIF is an autogenerated mock type for the OrderAdapterIF type
type OrderAdapterIF struct {
	mock.Mock
}

type OrderAdapterIF_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderAdapterIF) EXPECT() *OrderAdapterIF_Expecter {
	return &OrderAdapterIF_Expecter{mock: &_m.Mock}
}

// CreateOrder provides a mock function with given fields: ctx, orderID, paymentID, currencyCode, paymentTotal, paymentFlow
func (_m *OrderAdapterIF) CreateOrder(ctx context.Context, orderID string, paymentID string, currencyCode string, paymentTotal decimal.Decimal, paymentFlow enums.PaymentFlowEnum) (response.DeunaOrderResponseDTO, error) {
	ret := _m.Called(ctx, orderID, paymentID, currencyCode, paymentTotal, paymentFlow)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 response.DeunaOrderResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, decimal.Decimal, enums.PaymentFlowEnum) (response.DeunaOrderResponseDTO, error)); ok {
		return rf(ctx, orderID, paymentID, currencyCode, paymentTotal, paymentFlow)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, decimal.Decimal, enums.PaymentFlowEnum) response.DeunaOrderResponseDTO); ok {
		r0 = rf(ctx, orderID, paymentID, currencyCode, paymentTotal, paymentFlow)
	} else {
		r0 = ret.Get(0).(response.DeunaOrderResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, decimal.Decimal, enums.PaymentFlowEnum) error); ok {
		r1 = rf(ctx, orderID, paymentID, currencyCode, paymentTotal, paymentFlow)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderAdapterIF_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type OrderAdapterIF_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID string
//   - paymentID string
//   - currencyCode string
//   - paymentTotal decimal.Decimal
//   - paymentFlow enums.PaymentFlowEnum
func (_e *OrderAdapterIF_Expecter) CreateOrder(ctx interface{}, orderID interface{}, paymentID interface{}, currencyCode interface{}, paymentTotal interface{}, paymentFlow interface{}) *OrderAdapterIF_CreateOrder_Call {
	return &OrderAdapterIF_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, orderID, paymentID, currencyCode, paymentTotal, paymentFlow)}
}

func (_c *OrderAdapterIF_CreateOrder_Call) Run(run func(ctx context.Context, orderID string, paymentID string, currencyCode string, paymentTotal decimal.Decimal, paymentFlow enums.PaymentFlowEnum)) *OrderAdapterIF_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(decimal.Decimal), args[5].(enums.PaymentFlowEnum))
	})
	return _c
}

func (_c *OrderAdapterIF_CreateOrder_Call) Return(_a0 response.DeunaOrderResponseDTO, _a1 error) *OrderAdapterIF_CreateOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderAdapterIF_CreateOrder_Call) RunAndReturn(run func(context.Context, string, string, string, decimal.Decimal, enums.PaymentFlowEnum) (response.DeunaOrderResponseDTO, error)) *OrderAdapterIF_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderByReferenceID provides a mock function with given fields: ctx, referenceID, enterpriseID
func (_m *OrderAdapterIF) GetOrderByReferenceID(ctx context.Context, referenceID string, enterpriseID string) (entities.Order, error) {
	ret := _m.Called(ctx, referenceID, enterpriseID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderByReferenceID")
	}

	var r0 entities.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (entities.Order, error)); ok {
		return rf(ctx, referenceID, enterpriseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entities.Order); ok {
		r0 = rf(ctx, referenceID, enterpriseID)
	} else {
		r0 = ret.Get(0).(entities.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, referenceID, enterpriseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderAdapterIF_GetOrderByReferenceID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderByReferenceID'
type OrderAdapterIF_GetOrderByReferenceID_Call struct {
	*mock.Call
}

// GetOrderByReferenceID is a helper method to define mock.On call
//   - ctx context.Context
//   - referenceID string
//   - enterpriseID string
func (_e *OrderAdapterIF_Expecter) GetOrderByReferenceID(ctx interface{}, referenceID interface{}, enterpriseID interface{}) *OrderAdapterIF_GetOrderByReferenceID_Call {
	return &OrderAdapterIF_GetOrderByReferenceID_Call{Call: _e.mock.On("GetOrderByReferenceID", ctx, referenceID, enterpriseID)}
}

func (_c *OrderAdapterIF_GetOrderByReferenceID_Call) Run(run func(ctx context.Context, referenceID string, enterpriseID string)) *OrderAdapterIF_GetOrderByReferenceID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *OrderAdapterIF_GetOrderByReferenceID_Call) Return(_a0 entities.Order, _a1 error) *OrderAdapterIF_GetOrderByReferenceID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderAdapterIF_GetOrderByReferenceID_Call) RunAndReturn(run func(context.Context, string, string) (entities.Order, error)) *OrderAdapterIF_GetOrderByReferenceID_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderAdapterIF creates a new instance of OrderAdapterIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderAdapterIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderAdapterIF {
	mock := &OrderAdapterIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
