// Code generated by mockery. DO NOT EDIT.

package adapters

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	request "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/application/card/adapters/resources/dto/request"
	response "gitlab.com/clubhub.ai1/organization/backend/payments-api/internal/application/card/adapters/resources/dto/response"
)

// CardAdapter is an autogenerated mock type for the CardAdapter type
type CardAdapter struct {
	mock.Mock
}

type CardAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *CardAdapter) EXPECT() *CardAdapter_Expecter {
	return &CardAdapter_Expecter{mock: &_m.Mock}
}

// CreateCard provides a mock function with given fields: ctx, userID, userType, enterpriseID, body
func (_m *CardAdapter) CreateCard(ctx context.Context, userID string, userType string, enterpriseID string, body request.CreateCardRequestDTO) (response.CardResponseDataDTO, error) {
	ret := _m.Called(ctx, userID, userType, enterpriseID, body)

	if len(ret) == 0 {
		panic("no return value specified for CreateCard")
	}

	var r0 response.CardResponseDataDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, request.CreateCardRequestDTO) (response.CardResponseDataDTO, error)); ok {
		return rf(ctx, userID, userType, enterpriseID, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, request.CreateCardRequestDTO) response.CardResponseDataDTO); ok {
		r0 = rf(ctx, userID, userType, enterpriseID, body)
	} else {
		r0 = ret.Get(0).(response.CardResponseDataDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, request.CreateCardRequestDTO) error); ok {
		r1 = rf(ctx, userID, userType, enterpriseID, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CardAdapter_CreateCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCard'
type CardAdapter_CreateCard_Call struct {
	*mock.Call
}

// CreateCard is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - userType string
//   - enterpriseID string
//   - body request.CreateCardRequestDTO
func (_e *CardAdapter_Expecter) CreateCard(ctx interface{}, userID interface{}, userType interface{}, enterpriseID interface{}, body interface{}) *CardAdapter_CreateCard_Call {
	return &CardAdapter_CreateCard_Call{Call: _e.mock.On("CreateCard", ctx, userID, userType, enterpriseID, body)}
}

func (_c *CardAdapter_CreateCard_Call) Run(run func(ctx context.Context, userID string, userType string, enterpriseID string, body request.CreateCardRequestDTO)) *CardAdapter_CreateCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(request.CreateCardRequestDTO))
	})
	return _c
}

func (_c *CardAdapter_CreateCard_Call) Return(_a0 response.CardResponseDataDTO, _a1 error) *CardAdapter_CreateCard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CardAdapter_CreateCard_Call) RunAndReturn(run func(context.Context, string, string, string, request.CreateCardRequestDTO) (response.CardResponseDataDTO, error)) *CardAdapter_CreateCard_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCard provides a mock function with given fields: ctx, cardID, externalCardID, userID, enterpriseID
func (_m *CardAdapter) DeleteCard(ctx context.Context, cardID string, externalCardID string, userID string, enterpriseID string) (response.DeleteCardResponseDTO, error) {
	ret := _m.Called(ctx, cardID, externalCardID, userID, enterpriseID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCard")
	}

	var r0 response.DeleteCardResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (response.DeleteCardResponseDTO, error)); ok {
		return rf(ctx, cardID, externalCardID, userID, enterpriseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) response.DeleteCardResponseDTO); ok {
		r0 = rf(ctx, cardID, externalCardID, userID, enterpriseID)
	} else {
		r0 = ret.Get(0).(response.DeleteCardResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, cardID, externalCardID, userID, enterpriseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CardAdapter_DeleteCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCard'
type CardAdapter_DeleteCard_Call struct {
	*mock.Call
}

// DeleteCard is a helper method to define mock.On call
//   - ctx context.Context
//   - cardID string
//   - externalCardID string
//   - userID string
//   - enterpriseID string
func (_e *CardAdapter_Expecter) DeleteCard(ctx interface{}, cardID interface{}, externalCardID interface{}, userID interface{}, enterpriseID interface{}) *CardAdapter_DeleteCard_Call {
	return &CardAdapter_DeleteCard_Call{Call: _e.mock.On("DeleteCard", ctx, cardID, externalCardID, userID, enterpriseID)}
}

func (_c *CardAdapter_DeleteCard_Call) Run(run func(ctx context.Context, cardID string, externalCardID string, userID string, enterpriseID string)) *CardAdapter_DeleteCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *CardAdapter_DeleteCard_Call) Return(_a0 response.DeleteCardResponseDTO, _a1 error) *CardAdapter_DeleteCard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CardAdapter_DeleteCard_Call) RunAndReturn(run func(context.Context, string, string, string, string) (response.DeleteCardResponseDTO, error)) *CardAdapter_DeleteCard_Call {
	_c.Call.Return(run)
	return _c
}

// NewCardAdapter creates a new instance of CardAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCardAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *CardAdapter {
	mock := &CardAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
