// Code generated by mockery. DO NOT EDIT.

package adapters

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

type Logger_Expecter struct {
	mock *mock.Mock
}

func (_m *Logger) EXPECT() *Logger_Expecter {
	return &Logger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function with given fields: ctx, msg, args
func (_m *Logger) Debug(ctx context.Context, msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type Logger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - args ...interface{}
func (_e *Logger_Expecter) Debug(ctx interface{}, msg interface{}, args ...interface{}) *Logger_Debug_Call {
	return &Logger_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{ctx, msg}, args...)...)}
}

func (_c *Logger_Debug_Call) Run(run func(ctx context.Context, msg string, args ...interface{})) *Logger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Debug_Call) Return() *Logger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Debug_Call) RunAndReturn(run func(context.Context, string, ...interface{})) *Logger_Debug_Call {
	_c.Run(run)
	return _c
}

// Debugc provides a mock function with given fields: ctx, caller, msg, args
func (_m *Logger) Debugc(ctx context.Context, caller int, msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, caller, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Debugc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debugc'
type Logger_Debugc_Call struct {
	*mock.Call
}

// Debugc is a helper method to define mock.On call
//   - ctx context.Context
//   - caller int
//   - msg string
//   - args ...interface{}
func (_e *Logger_Expecter) Debugc(ctx interface{}, caller interface{}, msg interface{}, args ...interface{}) *Logger_Debugc_Call {
	return &Logger_Debugc_Call{Call: _e.mock.On("Debugc",
		append([]interface{}{ctx, caller, msg}, args...)...)}
}

func (_c *Logger_Debugc_Call) Run(run func(ctx context.Context, caller int, msg string, args ...interface{})) *Logger_Debugc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Debugc_Call) Return() *Logger_Debugc_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Debugc_Call) RunAndReturn(run func(context.Context, int, string, ...interface{})) *Logger_Debugc_Call {
	_c.Run(run)
	return _c
}

// Error provides a mock function with given fields: ctx, msg, args
func (_m *Logger) Error(ctx context.Context, msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type Logger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - args ...interface{}
func (_e *Logger_Expecter) Error(ctx interface{}, msg interface{}, args ...interface{}) *Logger_Error_Call {
	return &Logger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{ctx, msg}, args...)...)}
}

func (_c *Logger_Error_Call) Run(run func(ctx context.Context, msg string, args ...interface{})) *Logger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Error_Call) Return() *Logger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Error_Call) RunAndReturn(run func(context.Context, string, ...interface{})) *Logger_Error_Call {
	_c.Run(run)
	return _c
}

// Errorc provides a mock function with given fields: ctx, caller, msg, args
func (_m *Logger) Errorc(ctx context.Context, caller int, msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, caller, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Errorc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errorc'
type Logger_Errorc_Call struct {
	*mock.Call
}

// Errorc is a helper method to define mock.On call
//   - ctx context.Context
//   - caller int
//   - msg string
//   - args ...interface{}
func (_e *Logger_Expecter) Errorc(ctx interface{}, caller interface{}, msg interface{}, args ...interface{}) *Logger_Errorc_Call {
	return &Logger_Errorc_Call{Call: _e.mock.On("Errorc",
		append([]interface{}{ctx, caller, msg}, args...)...)}
}

func (_c *Logger_Errorc_Call) Run(run func(ctx context.Context, caller int, msg string, args ...interface{})) *Logger_Errorc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Errorc_Call) Return() *Logger_Errorc_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Errorc_Call) RunAndReturn(run func(context.Context, int, string, ...interface{})) *Logger_Errorc_Call {
	_c.Run(run)
	return _c
}

// Info provides a mock function with given fields: ctx, msg, args
func (_m *Logger) Info(ctx context.Context, msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type Logger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - args ...interface{}
func (_e *Logger_Expecter) Info(ctx interface{}, msg interface{}, args ...interface{}) *Logger_Info_Call {
	return &Logger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{ctx, msg}, args...)...)}
}

func (_c *Logger_Info_Call) Run(run func(ctx context.Context, msg string, args ...interface{})) *Logger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Info_Call) Return() *Logger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Info_Call) RunAndReturn(run func(context.Context, string, ...interface{})) *Logger_Info_Call {
	_c.Run(run)
	return _c
}

// Infoc provides a mock function with given fields: ctx, caller, msg, args
func (_m *Logger) Infoc(ctx context.Context, caller int, msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, caller, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Infoc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Infoc'
type Logger_Infoc_Call struct {
	*mock.Call
}

// Infoc is a helper method to define mock.On call
//   - ctx context.Context
//   - caller int
//   - msg string
//   - args ...interface{}
func (_e *Logger_Expecter) Infoc(ctx interface{}, caller interface{}, msg interface{}, args ...interface{}) *Logger_Infoc_Call {
	return &Logger_Infoc_Call{Call: _e.mock.On("Infoc",
		append([]interface{}{ctx, caller, msg}, args...)...)}
}

func (_c *Logger_Infoc_Call) Run(run func(ctx context.Context, caller int, msg string, args ...interface{})) *Logger_Infoc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Infoc_Call) Return() *Logger_Infoc_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Infoc_Call) RunAndReturn(run func(context.Context, int, string, ...interface{})) *Logger_Infoc_Call {
	_c.Run(run)
	return _c
}

// Warn provides a mock function with given fields: ctx, msg, args
func (_m *Logger) Warn(ctx context.Context, msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type Logger_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - args ...interface{}
func (_e *Logger_Expecter) Warn(ctx interface{}, msg interface{}, args ...interface{}) *Logger_Warn_Call {
	return &Logger_Warn_Call{Call: _e.mock.On("Warn",
		append([]interface{}{ctx, msg}, args...)...)}
}

func (_c *Logger_Warn_Call) Run(run func(ctx context.Context, msg string, args ...interface{})) *Logger_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Warn_Call) Return() *Logger_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Warn_Call) RunAndReturn(run func(context.Context, string, ...interface{})) *Logger_Warn_Call {
	_c.Run(run)
	return _c
}

// Warnc provides a mock function with given fields: ctx, caller, msg, args
func (_m *Logger) Warnc(ctx context.Context, caller int, msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, caller, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Warnc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warnc'
type Logger_Warnc_Call struct {
	*mock.Call
}

// Warnc is a helper method to define mock.On call
//   - ctx context.Context
//   - caller int
//   - msg string
//   - args ...interface{}
func (_e *Logger_Expecter) Warnc(ctx interface{}, caller interface{}, msg interface{}, args ...interface{}) *Logger_Warnc_Call {
	return &Logger_Warnc_Call{Call: _e.mock.On("Warnc",
		append([]interface{}{ctx, caller, msg}, args...)...)}
}

func (_c *Logger_Warnc_Call) Run(run func(ctx context.Context, caller int, msg string, args ...interface{})) *Logger_Warnc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Warnc_Call) Return() *Logger_Warnc_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Warnc_Call) RunAndReturn(run func(context.Context, int, string, ...interface{})) *Logger_Warnc_Call {
	_c.Run(run)
	return _c
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
